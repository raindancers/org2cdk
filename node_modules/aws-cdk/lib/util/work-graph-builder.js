"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkGraphBuilder = void 0;
const cxapi = require("@aws-cdk/cx-api");
const cdk_assets_1 = require("cdk-assets");
const work_graph_1 = require("./work-graph");
const work_graph_types_1 = require("./work-graph-types");
class WorkGraphBuilder {
    constructor(prebuildAssets, idPrefix = '') {
        this.prebuildAssets = prebuildAssets;
        this.idPrefix = idPrefix;
        this.graph = new work_graph_1.WorkGraph();
        this.assetBuildNodes = new Map;
    }
    addStack(artifact) {
        this.graph.addNodes({
            type: 'stack',
            id: `${this.idPrefix}${artifact.id}`,
            dependencies: new Set(this.getDepIds(artifact.dependencies)),
            stack: artifact,
            deploymentState: work_graph_types_1.DeploymentState.PENDING,
            priority: WorkGraphBuilder.PRIORITIES.stack,
        });
    }
    /**
     * Oof, see this parameter list
     */
    // eslint-disable-next-line max-len
    addAsset(parentStack, assetArtifact, assetManifest, asset) {
        const buildId = `${this.idPrefix}${asset.id}-build`;
        // Add the build node, but only one per "source"
        // The genericSource includes a relative path we could make absolute to do more effective deduplication of build steps. Not doing that right now.
        const assetBuildNodeKey = JSON.stringify(asset.genericSource);
        if (!this.assetBuildNodes.has(assetBuildNodeKey)) {
            const node = {
                type: 'asset-build',
                id: buildId,
                dependencies: new Set([
                    ...this.getDepIds(assetArtifact.dependencies),
                    // If we disable prebuild, then assets inherit dependencies from their parent stack
                    ...!this.prebuildAssets ? this.getDepIds(parentStack.dependencies) : [],
                ]),
                parentStack,
                assetManifestArtifact: assetArtifact,
                assetManifest,
                asset,
                deploymentState: work_graph_types_1.DeploymentState.PENDING,
                priority: WorkGraphBuilder.PRIORITIES['asset-build'],
            };
            this.assetBuildNodes.set(assetBuildNodeKey, node);
            this.graph.addNodes(node);
        }
        // Always add the publish
        const publishNodeId = `${this.idPrefix}${asset.id}-publish`;
        this.graph.addNodes({
            type: 'asset-publish',
            id: publishNodeId,
            dependencies: new Set([
                buildId,
                // The asset publish step also depends on the stacks that the parent depends on.
                // This is purely cosmetic: if we don't do this, the progress printing of asset publishing
                // is going to interfere with the progress bar of the stack deployment. We could remove this
                // for overall faster deployments if we ever have a better method of progress displaying.
                // Note: this may introduce a cycle if one of the parent's dependencies is another stack that
                // depends on this asset. To workaround this we remove these cycles once all nodes have
                // been added to the graph.
                ...this.getDepIds(parentStack.dependencies.filter(cxapi.CloudFormationStackArtifact.isCloudFormationStackArtifact)),
            ]),
            parentStack,
            assetManifestArtifact: assetArtifact,
            assetManifest,
            asset,
            deploymentState: work_graph_types_1.DeploymentState.PENDING,
            priority: WorkGraphBuilder.PRIORITIES['asset-publish'],
        });
        // This will work whether the stack node has been added yet or not
        this.graph.addDependency(`${this.idPrefix}${parentStack.id}`, publishNodeId);
    }
    build(artifacts) {
        const parentStacks = stacksFromAssets(artifacts);
        for (const artifact of artifacts) {
            if (cxapi.CloudFormationStackArtifact.isCloudFormationStackArtifact(artifact)) {
                this.addStack(artifact);
            }
            else if (cxapi.AssetManifestArtifact.isAssetManifestArtifact(artifact)) {
                const manifest = cdk_assets_1.AssetManifest.fromFile(artifact.file);
                for (const entry of manifest.entries) {
                    const parentStack = parentStacks.get(artifact);
                    if (parentStack === undefined) {
                        throw new Error('Found an asset manifest that is not associated with a stack');
                    }
                    this.addAsset(parentStack, artifact, manifest, entry);
                }
            }
            else if (cxapi.NestedCloudAssemblyArtifact.isNestedCloudAssemblyArtifact(artifact)) {
                const assembly = new cxapi.CloudAssembly(artifact.fullPath, { topoSort: false });
                const nestedGraph = new WorkGraphBuilder(this.prebuildAssets, `${this.idPrefix}${artifact.id}.`).build(assembly.artifacts);
                this.graph.absorb(nestedGraph);
            }
            else {
                // Ignore whatever else
            }
        }
        this.graph.removeUnavailableDependencies();
        // Remove any potentially introduced cycles between asset publishing and the stacks that depend on them.
        this.removeStackPublishCycles();
        return this.graph;
    }
    getDepIds(deps) {
        const ids = [];
        for (const artifact of deps) {
            if (cxapi.AssetManifestArtifact.isAssetManifestArtifact(artifact)) {
                // Depend on only the publish step. The publish step will depend on the build step on its own.
                ids.push(`${this.idPrefix}${artifact.id}-publish`);
            }
            else {
                ids.push(`${this.idPrefix}${artifact.id}`);
            }
        }
        return ids;
    }
    removeStackPublishCycles() {
        const stacks = this.graph.nodesOfType('stack');
        for (const stack of stacks) {
            for (const dep of stack.dependencies) {
                const node = this.graph.nodes[dep];
                if (!node || node.type !== 'asset-publish' || !node.dependencies.has(stack.id)) {
                    continue;
                }
                // Delete the dependency from the asset-publish onto the stack.
                // The publish -> stack dependencies are purely cosmetic to prevent publish output
                // from interfering with the progress bar of the stack deployment.
                node.dependencies.delete(stack.id);
            }
        }
    }
}
exports.WorkGraphBuilder = WorkGraphBuilder;
/**
 * Default priorities for nodes
 *
 * Assets builds have higher priority than the other two operations, to make good on our promise that
 * '--prebuild-assets' will actually do assets before stacks (if it can). Unfortunately it is the
 * default :(
 *
 * But between stack dependencies and publish dependencies, stack dependencies go first
 */
WorkGraphBuilder.PRIORITIES = {
    'asset-build': 10,
    'asset-publish': 0,
    'stack': 5,
};
function stacksFromAssets(artifacts) {
    const ret = new Map();
    for (const stack of artifacts.filter(cxapi.CloudFormationStackArtifact.isCloudFormationStackArtifact)) {
        const assetArtifacts = stack.dependencies.filter(cxapi.AssetManifestArtifact.isAssetManifestArtifact);
        for (const art of assetArtifacts) {
            ret.set(art, stack);
        }
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,