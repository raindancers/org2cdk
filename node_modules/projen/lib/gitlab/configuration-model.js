"use strict";
// @see https://docs.gitlab.com/ee/ci/yaml/
// Schema from: https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json
// Initial TypeScript Interfaces from: https://app.quicktype.io/#
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowWhen = exports.Strategy = exports.LinkType = exports.DefaultElement = exports.KubernetesEnum = exports.DeploymentTier = exports.Action = exports.JobWhen = exports.CacheWhen = exports.CachePolicy = void 0;
/**
 * Configure the upload and download behaviour of a cache.
 * @see https://docs.gitlab.com/ee/ci/yaml/#cachepolicy
 */
var CachePolicy;
(function (CachePolicy) {
    /** Only download the cache when the job starts, but never upload changes when the job finishes. */
    CachePolicy["PULL"] = "pull";
    /** Only upload a cache when the job finishes, but never download the cache when the job starts. */
    CachePolicy["PUSH"] = "push";
    /** The job downloads the cache when the job starts, and uploads changes to the cache when the job ends. */
    CachePolicy["PULL_PUSH"] = "pull-push";
})(CachePolicy = exports.CachePolicy || (exports.CachePolicy = {}));
/**
 * Configure when artifacts are uploaded depended on job status.
 * @see https://docs.gitlab.com/ee/ci/yaml/#cachewhen
 */
var CacheWhen;
(function (CacheWhen) {
    /** Upload artifacts regardless of job status. */
    CacheWhen["ALWAYS"] = "always";
    /** Upload artifacts only when the job fails. */
    CacheWhen["ON_FAILURE"] = "on_failure";
    /** Upload artifacts only when the job succeeds (this is the default). */
    CacheWhen["ON_SUCCESS"] = "on_success";
})(CacheWhen = exports.CacheWhen || (exports.CacheWhen = {}));
/**
 * Describes the conditions for when to run the job. Defaults to 'on_success'.
 * @see https://docs.gitlab.com/ee/ci/yaml/#when
 */
var JobWhen;
(function (JobWhen) {
    JobWhen["ALWAYS"] = "always";
    JobWhen["DELAYED"] = "delayed";
    JobWhen["MANUAL"] = "manual";
    JobWhen["NEVER"] = "never";
    JobWhen["ON_FAILURE"] = "on_failure";
    JobWhen["ON_SUCCESS"] = "on_success";
})(JobWhen = exports.JobWhen || (exports.JobWhen = {}));
/**
 * Specifies what this job will do. 'start' (default) indicates the job will start the
 * deployment. 'prepare' indicates this will not affect the deployment. 'stop' indicates
 * this will stop the deployment.
 */
var Action;
(function (Action) {
    Action["PREPARE"] = "prepare";
    Action["START"] = "start";
    Action["STOP"] = "stop";
})(Action = exports.Action || (exports.Action = {}));
/**
 * Explicitly specifies the tier of the deployment environment if non-standard environment
 * name is used.
 */
var DeploymentTier;
(function (DeploymentTier) {
    DeploymentTier["DEVELOPMENT"] = "development";
    DeploymentTier["OTHER"] = "other";
    DeploymentTier["PRODUCTION"] = "production";
    DeploymentTier["STAGING"] = "staging";
    DeploymentTier["TESTING"] = "testing";
})(DeploymentTier = exports.DeploymentTier || (exports.DeploymentTier = {}));
/**
 * Filter job based on if Kubernetes integration is active.
 */
var KubernetesEnum;
(function (KubernetesEnum) {
    KubernetesEnum["ACTIVE"] = "active";
})(KubernetesEnum = exports.KubernetesEnum || (exports.KubernetesEnum = {}));
var DefaultElement;
(function (DefaultElement) {
    DefaultElement["AFTER_SCRIPT"] = "after_script";
    DefaultElement["ARTIFACTS"] = "artifacts";
    DefaultElement["BEFORE_SCRIPT"] = "before_script";
    DefaultElement["CACHE"] = "cache";
    DefaultElement["IMAGE"] = "image";
    DefaultElement["INTERRUPTIBLE"] = "interruptible";
    DefaultElement["RETRY"] = "retry";
    DefaultElement["SERVICES"] = "services";
    DefaultElement["TAGS"] = "tags";
    DefaultElement["TIMEOUT"] = "timeout";
})(DefaultElement = exports.DefaultElement || (exports.DefaultElement = {}));
/**
 * The content kind of what users can download via url.
 */
var LinkType;
(function (LinkType) {
    LinkType["IMAGE"] = "image";
    LinkType["OTHER"] = "other";
    LinkType["PACKAGE"] = "package";
    LinkType["RUNBOOK"] = "runbook";
})(LinkType = exports.LinkType || (exports.LinkType = {}));
/**
 * You can mirror the pipeline status from the triggered pipeline to the source bridge job
 * by using strategy: depend
 * @see https://docs.gitlab.com/ee/ci/yaml/#triggerstrategy
 */
var Strategy;
(function (Strategy) {
    Strategy["DEPEND"] = "depend";
})(Strategy = exports.Strategy || (exports.Strategy = {}));
/**
 * Describes the conditions for when to run the job. Defaults to 'on_success'.
 * The value can only be 'always' or 'never' when used with workflow.
 * @see https://docs.gitlab.com/ee/ci/yaml/#workflowrules
 */
var WorkflowWhen;
(function (WorkflowWhen) {
    WorkflowWhen["ALWAYS"] = "always";
    WorkflowWhen["NEVER"] = "never";
})(WorkflowWhen = exports.WorkflowWhen || (exports.WorkflowWhen = {}));
//# sourceMappingURL=data:application/json;base64,