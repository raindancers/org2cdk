"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gitpod = exports.GitpodPortVisibility = exports.GitpodOnOpen = exports.GitpodOpenIn = exports.GitpodOpenMode = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("./component");
const yaml_1 = require("./yaml");
/**
 * Relative path of Gitpod file to generate
 */
const GITPOD_FILE = ".gitpod.yml";
/**
 * https://www.gitpod.io/docs/configuration/
 * https://www.gitpod.io/docs/config-start-tasks/
 * https://www.gitpod.io/docs/prebuilds/#configure-the-github-app
 * https://www.gitpod.io/docs/vscode-extensions/
 */
/**
 * Configure how the terminal should be opened relative to the previous task.
 */
var GitpodOpenMode;
(function (GitpodOpenMode) {
    /**
     * Opens in the same tab group right after the previous tab
     */
    GitpodOpenMode["TAB_AFTER"] = "tab-after";
    /**
     * Opens in the same tab group left before the previous tab
     */
    GitpodOpenMode["TAB_BEFORE"] = "tab-before";
    /**
     * Splits and adds the terminal to the right
     */
    GitpodOpenMode["SPLIT_RIGHT"] = "split-right";
    /**
     * Splits and adds the terminal to the left
     */
    GitpodOpenMode["SPLIT_LEFT"] = "split-left";
    /**
     * Splits and adds the terminal to the top
     */
    GitpodOpenMode["SPLIT_TOP"] = "split-top";
    /**
     * Splits and adds the terminal to the bottom
     */
    GitpodOpenMode["SPLIT_BOTTOM"] = "split-bottom";
})(GitpodOpenMode = exports.GitpodOpenMode || (exports.GitpodOpenMode = {}));
/**
 * Configure where in the IDE the terminal should be opened.
 */
var GitpodOpenIn;
(function (GitpodOpenIn) {
    /**
     * the bottom panel (default)
     */
    GitpodOpenIn["BOTTOM"] = "bottom";
    /**
     * the left panel
     */
    GitpodOpenIn["LEFT"] = "left";
    /**
     * the right panel
     */
    GitpodOpenIn["RIGHT"] = "right";
    /**
     * the main editor area
     */
    GitpodOpenIn["MAIN"] = "main";
})(GitpodOpenIn = exports.GitpodOpenIn || (exports.GitpodOpenIn = {}));
/**
 * What to do when a service on a port is detected.
 */
var GitpodOnOpen;
(function (GitpodOnOpen) {
    /**
     * Open a new browser tab
     */
    GitpodOnOpen["OPEN_BROWSER"] = "open-browser";
    /**
     * Open a preview on the right side of the IDE
     */
    GitpodOnOpen["OPEN_PREVIEW"] = "open-preview";
    /**
     * Show a notification asking the user what to do (default)
     */
    GitpodOnOpen["NOTIFY"] = "notify";
    /**
     * Do nothing.
     */
    GitpodOnOpen["IGNORE"] = "ignore";
})(GitpodOnOpen = exports.GitpodOnOpen || (exports.GitpodOnOpen = {}));
/**
 * Whether the port visibility should be private or public
 */
var GitpodPortVisibility;
(function (GitpodPortVisibility) {
    /**
     * Allows everyone with the port URL to access the port (default)
     */
    GitpodPortVisibility["PUBLIC"] = "public";
    /**
     * Only allows users with workspace access to access the port
     */
    GitpodPortVisibility["PRIVATE"] = "private";
})(GitpodPortVisibility = exports.GitpodPortVisibility || (exports.GitpodPortVisibility = {}));
/**
 * The Gitpod component which emits .gitpod.yml
 */
class Gitpod extends component_1.Component {
    constructor(project, options = {}) {
        super(project);
        this.tasks = new Array();
        this.ports = new Array();
        this.vscodeExtensions = new Array();
        this.dockerImage = options?.dockerImage;
        if (options?.tasks) {
            for (const task of options.tasks) {
                this.addTasks(task);
            }
        }
        if (options?.prebuilds) {
            this.addPrebuilds(options.prebuilds);
        }
        if (options?.ports) {
            this.addPorts(...options.ports);
        }
        if (options?.vscodeExtensions) {
            this.addVscodeExtensions(...options.vscodeExtensions);
        }
        this.config = {
            image: () => this.renderDockerImage(),
            tasks: this.tasks,
            github: () => this.renderPrebuilds(),
            ports: this.ports,
            vscode: {
                extensions: this.vscodeExtensions,
            },
        };
        new yaml_1.YamlFile(this.project, GITPOD_FILE, {
            obj: this.config,
            omitEmpty: true,
            // GitPod needs to read the file from the repository in order to work.
            committed: true,
        });
    }
    /**
     * Add a custom Docker image or Dockerfile for the container.
     *
     * @param image The Docker image
     */
    addDockerImage(image) {
        if (this.dockerImage) {
            throw new Error("dockerImage cannot be redefined.");
        }
        this.dockerImage = image;
    }
    /**
     * Add tasks to run when gitpod starts.
     *
     * By default, all tasks will be run in parallel. To run tasks in sequence,
     * create a new `Task` and specify the other tasks as subtasks.
     *
     * @param tasks The new tasks
     */
    addTasks(...tasks) {
        this.tasks.push(...tasks.map((task) => ({
            name: task.name,
            command: `npx projen ${task.name}`,
        })));
    }
    /**
     * Add a prebuilds configuration for the Gitpod App
     * @param config The configuration
     */
    addPrebuilds(config) {
        this.prebuilds = config;
    }
    /**
     * Add a task with more granular options.
     *
     * By default, all tasks will be run in parallel. To run tasks in sequence,
     * create a new `Task` and set the other tasks as subtasks.
     *
     * @param options The task parameters
     */
    addCustomTask(options) {
        this.tasks.push({
            name: options.name,
            command: options.command,
            openMode: options.openMode,
            openIn: options.openIn,
            before: options.before,
            init: options.init,
            prebuild: options.prebuild,
        });
    }
    /**
     * Add ports that should be exposed (forwarded) from the container.
     *
     * @param ports The new ports
     */
    addPorts(...ports) {
        this.ports.push(...ports.map((port) => ({ port: port })));
    }
    /**
     * Add a list of VSCode extensions that should be automatically installed
     * in the container.
     *
     * These must be in the format defined in the Open VSX registry.
     * @example 'scala-lang.scala@0.3.9:O5XmjwY5Gz+0oDZAmqneJw=='
     * @see https://www.gitpod.io/docs/vscode-extensions/
     *
     * @param extensions The extension IDs
     */
    addVscodeExtensions(...extensions) {
        this.vscodeExtensions.push(...extensions);
    }
    renderDockerImage() {
        if (this.dockerImage?.image) {
            return this.dockerImage.image;
        }
        else if (this.dockerImage?.dockerFile) {
            return {
                file: this.dockerImage.dockerFile,
            };
        }
        else {
            return undefined;
        }
    }
    renderPrebuilds() {
        if (this.prebuilds) {
            return {
                prebuilds: this.prebuilds,
            };
        }
        else {
            return undefined;
        }
    }
}
_a = JSII_RTTI_SYMBOL_1;
Gitpod[_a] = { fqn: "projen.Gitpod", version: "0.71.82" };
exports.Gitpod = Gitpod;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0cG9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dpdHBvZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUF3QztBQVF4QyxpQ0FBa0M7QUFFbEM7O0dBRUc7QUFDSCxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUM7QUFFbEM7Ozs7O0dBS0c7QUFFSDs7R0FFRztBQUNILElBQVksY0F5Qlg7QUF6QkQsV0FBWSxjQUFjO0lBQ3hCOztPQUVHO0lBQ0gseUNBQXVCLENBQUE7SUFDdkI7O09BRUc7SUFDSCwyQ0FBeUIsQ0FBQTtJQUN6Qjs7T0FFRztJQUNILDZDQUEyQixDQUFBO0lBQzNCOztPQUVHO0lBQ0gsMkNBQXlCLENBQUE7SUFDekI7O09BRUc7SUFDSCx5Q0FBdUIsQ0FBQTtJQUN2Qjs7T0FFRztJQUNILCtDQUE2QixDQUFBO0FBQy9CLENBQUMsRUF6QlcsY0FBYyxHQUFkLHNCQUFjLEtBQWQsc0JBQWMsUUF5QnpCO0FBRUQ7O0dBRUc7QUFDSCxJQUFZLFlBaUJYO0FBakJELFdBQVksWUFBWTtJQUN0Qjs7T0FFRztJQUNILGlDQUFpQixDQUFBO0lBQ2pCOztPQUVHO0lBQ0gsNkJBQWEsQ0FBQTtJQUNiOztPQUVHO0lBQ0gsK0JBQWUsQ0FBQTtJQUNmOztPQUVHO0lBQ0gsNkJBQWEsQ0FBQTtBQUNmLENBQUMsRUFqQlcsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFpQnZCO0FBMkREOztHQUVHO0FBQ0gsSUFBWSxZQW9CWDtBQXBCRCxXQUFZLFlBQVk7SUFDdEI7O09BRUc7SUFDSCw2Q0FBNkIsQ0FBQTtJQUU3Qjs7T0FFRztJQUNILDZDQUE2QixDQUFBO0lBRTdCOztPQUVHO0lBQ0gsaUNBQWlCLENBQUE7SUFFakI7O09BRUc7SUFDSCxpQ0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBcEJXLFlBQVksR0FBWixvQkFBWSxLQUFaLG9CQUFZLFFBb0J2QjtBQUVEOztHQUVHO0FBQ0gsSUFBWSxvQkFVWDtB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LHdCQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50XCI7XG5pbXBvcnQge1xuICBJRGV2RW52aXJvbm1lbnQsXG4gIERldkVudmlyb25tZW50T3B0aW9ucyxcbiAgRGV2RW52aXJvbm1lbnREb2NrZXJJbWFnZSxcbn0gZnJvbSBcIi4vZGV2LWVudlwiO1xuaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gXCIuL3Byb2plY3RcIjtcbmltcG9ydCB7IFRhc2sgfSBmcm9tIFwiLi90YXNrXCI7XG5pbXBvcnQgeyBZYW1sRmlsZSB9IGZyb20gXCIuL3lhbWxcIjtcblxuLyoqXG4gKiBSZWxhdGl2ZSBwYXRoIG9mIEdpdHBvZCBmaWxlIHRvIGdlbmVyYXRlXG4gKi9cbmNvbnN0IEdJVFBPRF9GSUxFID0gXCIuZ2l0cG9kLnltbFwiO1xuXG4vKipcbiAqIGh0dHBzOi8vd3d3LmdpdHBvZC5pby9kb2NzL2NvbmZpZ3VyYXRpb24vXG4gKiBodHRwczovL3d3dy5naXRwb2QuaW8vZG9jcy9jb25maWctc3RhcnQtdGFza3MvXG4gKiBodHRwczovL3d3dy5naXRwb2QuaW8vZG9jcy9wcmVidWlsZHMvI2NvbmZpZ3VyZS10aGUtZ2l0aHViLWFwcFxuICogaHR0cHM6Ly93d3cuZ2l0cG9kLmlvL2RvY3MvdnNjb2RlLWV4dGVuc2lvbnMvXG4gKi9cblxuLyoqXG4gKiBDb25maWd1cmUgaG93IHRoZSB0ZXJtaW5hbCBzaG91bGQgYmUgb3BlbmVkIHJlbGF0aXZlIHRvIHRoZSBwcmV2aW91cyB0YXNrLlxuICovXG5leHBvcnQgZW51bSBHaXRwb2RPcGVuTW9kZSB7XG4gIC8qKlxuICAgKiBPcGVucyBpbiB0aGUgc2FtZSB0YWIgZ3JvdXAgcmlnaHQgYWZ0ZXIgdGhlIHByZXZpb3VzIHRhYlxuICAgKi9cbiAgVEFCX0FGVEVSID0gXCJ0YWItYWZ0ZXJcIixcbiAgLyoqXG4gICAqIE9wZW5zIGluIHRoZSBzYW1lIHRhYiBncm91cCBsZWZ0IGJlZm9yZSB0aGUgcHJldmlvdXMgdGFiXG4gICAqL1xuICBUQUJfQkVGT1JFID0gXCJ0YWItYmVmb3JlXCIsXG4gIC8qKlxuICAgKiBTcGxpdHMgYW5kIGFkZHMgdGhlIHRlcm1pbmFsIHRvIHRoZSByaWdodFxuICAgKi9cbiAgU1BMSVRfUklHSFQgPSBcInNwbGl0LXJpZ2h0XCIsXG4gIC8qKlxuICAgKiBTcGxpdHMgYW5kIGFkZHMgdGhlIHRlcm1pbmFsIHRvIHRoZSBsZWZ0XG4gICAqL1xuICBTUExJVF9MRUZUID0gXCJzcGxpdC1sZWZ0XCIsXG4gIC8qKlxuICAgKiBTcGxpdHMgYW5kIGFkZHMgdGhlIHRlcm1pbmFsIHRvIHRoZSB0b3BcbiAgICovXG4gIFNQTElUX1RPUCA9IFwic3BsaXQtdG9wXCIsXG4gIC8qKlxuICAgKiBTcGxpdHMgYW5kIGFkZHMgdGhlIHRlcm1pbmFsIHRvIHRoZSBib3R0b21cbiAgICovXG4gIFNQTElUX0JPVFRPTSA9IFwic3BsaXQtYm90dG9tXCIsXG59XG5cbi8qKlxuICogQ29uZmlndXJlIHdoZXJlIGluIHRoZSBJREUgdGhlIHRlcm1pbmFsIHNob3VsZCBiZSBvcGVuZWQuXG4gKi9cbmV4cG9ydCBlbnVtIEdpdHBvZE9wZW5JbiB7XG4gIC8qKlxuICAgKiB0aGUgYm90dG9tIHBhbmVsIChkZWZhdWx0KVxuICAgKi9cbiAgQk9UVE9NID0gXCJib3R0b21cIixcbiAgLyoqXG4gICAqIHRoZSBsZWZ0IHBhbmVsXG4gICAqL1xuICBMRUZUID0gXCJsZWZ0XCIsXG4gIC8qKlxuICAgKiB0aGUgcmlnaHQgcGFuZWxcbiAgICovXG4gIFJJR0hUID0gXCJyaWdodFwiLFxuICAvKipcbiAgICogdGhlIG1haW4gZWRpdG9yIGFyZWFcbiAgICovXG4gIE1BSU4gPSBcIm1haW5cIixcbn1cblxuLyoqXG4gKiBDb25maWd1cmUgb3B0aW9ucyBmb3IgYSB0YXNrIHRvIGJlIHJ1biB3aGVuIG9wZW5pbmcgYSBHaXRwb2RcbiAqIHdvcmtzcGFjZSAoZS5nLiBydW5uaW5nIHRlc3RzLCBvciBzdGFydGluZyBhIGRldiBzZXJ2ZXIpLlxuICpcbiAqIFN0YXJ0IE1vZGUgICAgICAgICB8IEV4ZWN1dGlvblxuICogRnJlc2ggV29ya3NwYWNlICAgIHwgYmVmb3JlICYmIGluaXQgJiYgY29tbWFuZFxuICogUmVzdGFydCBXb3Jrc3BhY2UgIHwgYmVmb3JlICYmIGNvbW1hbmRcbiAqIFNuYXBzaG90ICAgICAgICAgICB8IGJlZm9yZSAmJiBjb21tYW5kXG4gKiBQcmVidWlsZCAgICAgICAgICAgfCBiZWZvcmUgJiYgaW5pdCAmJiBwcmVidWlsZFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEdpdHBvZFRhc2sge1xuICAvKipcbiAgICogUmVxdWlyZWQuIFRoZSBzaGVsbCBjb21tYW5kIHRvIHJ1blxuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIG5hbWUgZm9yIHRoaXMgdGFzay5cbiAgICogQGRlZmF1bHQgLSB0YXNrIG5hbWVzIGFyZSBvbWl0dGVkIHdoZW4gYmxhbmtcbiAgICovXG4gIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gY29uZmlndXJlIGhvdyB0aGUgdGVybWluYWwgc2hvdWxkIGJlIG9wZW5lZCByZWxhdGl2ZSB0byB0aGUgcHJldmlvdXMgdGFzay5cbiAgICogQGRlZmF1bHQgR2l0cG9kT3Blbk1vZGUuVEFCX0FGVEVSXG4gICAqL1xuICByZWFkb25seSBvcGVuTW9kZT86IEdpdHBvZE9wZW5Nb2RlO1xuXG4gIC8qKlxuICAgKiBZb3UgY2FuIGNvbmZpZ3VyZSB3aGVyZSBpbiB0aGUgSURFIHRoZSB0ZXJtaW5hbCBzaG91bGQgYmUgb3BlbmVkXG4gICAqIEBkZWZhdWx0IEdpdHBvZE9wZW5Jbi5CT1RUT01cbiAgICovXG4gIHJlYWRvbmx5IG9wZW5Jbj86IEdpdHBvZE9wZW5JbjtcblxuICAvKipcbiAgICogSW4gY2FzZSB5b3UgbmVlZCB0byBydW4gc29tZXRoaW5nIGV2ZW4gYmVmb3JlIGluaXQsIHRoYXQgaXMgYSByZXF1aXJlbWVudCBmb3IgYm90aCBpbml0IGFuZCBjb21tYW5kLFxuICAgKiB5b3UgY2FuIHVzZSB0aGUgYmVmb3JlIHByb3BlcnR5LlxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgcmVhZG9ubHkgYmVmb3JlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5pdCBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byBzcGVjaWZ5IHNoZWxsIGNvbW1hbmRzIHRoYXQgc2hvdWxkIG9ubHkgYmUgZXhlY3V0ZWQgYWZ0ZXIgYSB3b3Jrc3BhY2VcbiAgICogd2FzIGZyZXNobHkgY2xvbmVkIGFuZCBuZWVkcyB0byBiZSBpbml0aWFsaXplZCBzb21laG93LiBTdWNoIHRhc2tzIGFyZSB1c3VhbGx5IGJ1aWxkcyBvciBkb3dubG9hZGluZ1xuICAgKiBkZXBlbmRlbmNpZXMuIEFueXRoaW5nIHlvdSBvbmx5IHdhbnQgdG8gZG8gb25jZSBidXQgbm90IHdoZW4geW91IHJlc3RhcnQgYSB3b3Jrc3BhY2Ugb3Igc3RhcnQgYSBzbmFwc2hvdC5cbiAgICogQGRlZmF1bHRcbiAgICovXG4gIHJlYWRvbmx5IGluaXQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb25hbCBwcmVidWlsZCBjb21tYW5kIHdpbGwgYmUgZXhlY3V0ZWQgZHVyaW5nIHByZWJ1aWxkcy4gSXQgaXMgbWVhbnQgdG8gcnVuIGFkZGl0aW9uYWwgbG9uZyBydW5uaW5nXG4gICAqIHByb2Nlc3NlcyB0aGF0IGNvdWxkIGJlIHVzZWZ1bCwgZS5nLiBydW5uaW5nIHRlc3Qgc3VpdGVzLlxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgcmVhZG9ubHkgcHJlYnVpbGQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogV2hhdCB0byBkbyB3aGVuIGEgc2VydmljZSBvbiBhIHBvcnQgaXMgZGV0ZWN0ZWQuXG4gKi9cbmV4cG9ydCBlbnVtIEdpdHBvZE9uT3BlbiB7XG4gIC8qKlxuICAgKiBPcGVuIGEgbmV3IGJyb3dzZXIgdGFiXG4gICAqL1xuICBPUEVOX0JST1dTRVIgPSBcIm9wZW4tYnJvd3NlclwiLFxuXG4gIC8qKlxuICAgKiBPcGVuIGEgcHJldmlldyBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgSURFXG4gICAqL1xuICBPUEVOX1BSRVZJRVcgPSBcIm9wZW4tcHJldmlld1wiLFxuXG4gIC8qKlxuICAgKiBTaG93IGEgbm90aWZpY2F0aW9uIGFza2luZyB0aGUgdXNlciB3aGF0IHRvIGRvIChkZWZhdWx0KVxuICAgKi9cbiAgTk9USUZZID0gXCJub3RpZnlcIixcblxuICAvKipcbiAgICogRG8gbm90aGluZy5cbiAgICovXG4gIElHTk9SRSA9IFwiaWdub3JlXCIsXG59XG5cbi8qKlxuICogV2hldGhlciB0aGUgcG9ydCB2aXNpYmlsaXR5IHNob3VsZCBiZSBwcml2YXRlIG9yIHB1YmxpY1xuICovXG5leHBvcnQgZW51bSBHaXRwb2RQb3J0VmlzaWJpbGl0eSB7XG4gIC8qKlxuICAgKiBBbGxvd3MgZXZlcnlvbmUgd2l0aCB0aGUgcG9ydCBVUkwgdG8gYWNjZXNzIHRoZSBwb3J0IChkZWZhdWx0KVxuICAgKi9cbiAgUFVCTElDID0gXCJwdWJsaWNcIixcblxuICAvKipcbiAgICogT25seSBhbGxvd3MgdXNlcnMgd2l0aCB3b3Jrc3BhY2UgYWNjZXNzIHRvIGFjY2VzcyB0aGUgcG9ydFxuICAgKi9cbiAgUFJJVkFURSA9IFwicHJpdmF0ZVwiLFxufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGFuIGV4cG9zZWQgcG9ydCBvbiBHaXRwb2RcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHaXRwb2RQb3J0IHtcbiAgLyoqXG4gICAqIEEgcG9ydCB0aGF0IHNob3VsZCBiZSBleHBvc2VkIChmb3J3YXJkZWQpIGZyb20gdGhlIGNvbnRhaW5lci5cbiAgICpcbiAgICogQGV4YW1wbGUgXCI4MDgwXCJcbiAgICovXG4gIHJlYWRvbmx5IHBvcnQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoYXQgdG8gZG8gd2hlbiBhIHNlcnZpY2Ugb24gYSBwb3J0IGlzIGRldGVjdGVkLlxuICAgKlxuICAgKiBAZGVmYXVsdCBHaXRwb2RPbk9wZW4uTk9USUZZXG4gICAqL1xuICByZWFkb25seSBvbk9wZW4/OiBHaXRwb2RPbk9wZW47XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHBvcnQgdmlzaWJpbGl0eSBzaG91bGQgYmUgcHJpdmF0ZSBvciBwdWJsaWMuXG4gICAqXG4gICAqIEBkZWZhdWx0IEdpdHBvZFBvcnRWaXNpYmlsaXR5LlBVQkxJQ1xuICAgKi9cbiAgcmVhZG9ubHkgdmlzaWJpbGl0eT86IEdpdHBvZFBvcnRWaXNpYmlsaXR5O1xufVxuXG4vKipcbiAqIENvbmZpZ3VyZSB0aGUgR2l0cG9kIEFwcCBmb3IgcHJlYnVpbGRzLlxuICogQ3VycmVudGx5IG9ubHkgR2l0SHViIGlzIHN1cHBvcnRlZC5cbiAqIEBzZWUgaHR0cHM6Ly93d3cuZ2l0cG9kLmlvL2RvY3MvcHJlYnVpbGRzL1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEdpdHBvZFByZWJ1aWxkcyB7XG4gIC8qKlxuICAgKiBFbmFibGUgZm9yIHRoZSBtYXN0ZXIvZGVmYXVsdCBicmFuY2hcbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgcmVhZG9ubHkgbWFzdGVyPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRW5hYmxlIGZvciBhbGwgYnJhbmNoZXMgaW4gdGhpcyByZXBvXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBicmFuY2hlcz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEVuYWJsZSBmb3IgcHVsbCByZXF1ZXN0cyBjb21pbmcgZnJvbSB0aGlzIHJlcG9cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgcmVhZG9ubHkgcHVsbFJlcXVlc3RzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRW5hYmxlIGZvciBwdWxsIHJlcXVlc3RzIGNvbWluZyBmcm9tIGZvcmtzXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBwdWxsUmVxdWVzdHNGcm9tRm9ya3M/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBZGQgYSBjaGVjayB0byBwdWxsIHJlcXVlc3RzXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHJlYWRvbmx5IGFkZENoZWNrPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQWRkIGEgXCJSZXZpZXcgaW4gR2l0cG9kXCIgYnV0dG9uIGFzIGEgY29tbWVudCB0byBwdWxsIHJlcXVlc3RzXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBhZGRDb21tZW50PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQWRkIGEgXCJSZXZpZXcgaW4gR2l0cG9kXCIgYnV0dG9uIHRvIHRoZSBwdWxsIHJlcXVlc3QncyBkZXNjcmlwdGlvblxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgYWRkQmFkZ2U/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBZGQgYSBsYWJlbCBvbmNlIHRoZSBwcmVidWlsZCBpcyByZWFkeSB0byBwdWxsIHJlcXVlc3RzXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBhZGRMYWJlbD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQ29uc3RydWN0b3Igb3B0aW9ucyBmb3IgdGhlIEdpdHBvZCBjb21wb25lbnQuXG4gKlxuICogQnkgZGVmYXVsdCwgR2l0cG9kIHVzZXMgdGhlICdnaXRwb2Qvd29ya3NwYWNlLWZ1bGwnIGRvY2tlciBpbWFnZS5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dpdHBvZC1pby93b3Jrc3BhY2UtaW1hZ2VzL2Jsb2IvbWFzdGVyL2Z1bGwvRG9ja2VyZmlsZVxuICpcbiAqIEJ5IGRlZmF1bHQsIGFsbCB0YXNrcyB3aWxsIGJlIHJ1biBpbiBwYXJhbGxlbC4gVG8gcnVuIHRoZSB0YXNrcyBpbiBzZXF1ZW5jZSxcbiAqIGNyZWF0ZSBhIG5ldyB0YXNrIGFuZCBzcGVjaWZ5IHRoZSBvdGhlciB0YXNrcyBhcyBzdWJ0YXNrcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHaXRwb2RPcHRpb25zIGV4dGVuZHMgRGV2RW52aXJvbm1lbnRPcHRpb25zIHtcbiAgLyoqXG4gICAqIE9wdGlvbmFsIEdpdHBvZCdzIEdpdGh1YiBBcHAgaW50ZWdyYXRpb24gZm9yIHByZWJ1aWxkc1xuICAgKiBJZiB0aGlzIGlzIG5vdCBzZXQgYW5kIEdpdHBvZCdzIEdpdGh1YiBBcHAgaXMgaW5zdGFsbGVkLCB0aGVuIEdpdHBvZCB3aWxsIGFwcGx5XG4gICAqIHRoZXNlIGRlZmF1bHRzOiBodHRwczovL3d3dy5naXRwb2QuaW8vZG9jcy9wcmVidWlsZHMvI2NvbmZpZ3VyZS10aGUtZ2l0aHViLWFwcFxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHJlYWRvbmx5IHByZWJ1aWxkcz86IEdpdHBvZFByZWJ1aWxkcztcbn1cblxuLyoqXG4gKiBUaGUgR2l0cG9kIGNvbXBvbmVudCB3aGljaCBlbWl0cyAuZ2l0cG9kLnltbFxuICovXG5leHBvcnQgY2xhc3MgR2l0cG9kIGV4dGVuZHMgQ29tcG9uZW50IGltcGxlbWVudHMgSURldkVudmlyb25tZW50IHtcbiAgcHJpdmF0ZSBkb2NrZXJJbWFnZTogRGV2RW52aXJvbm1lbnREb2NrZXJJbWFnZSB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBwcmVidWlsZHM6IEdpdHBvZFByZWJ1aWxkcyB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSByZWFkb25seSB0YXNrcyA9IG5ldyBBcnJheTxHaXRwb2RUYXNrPigpO1xuICBwcml2YXRlIHJlYWRvbmx5IHBvcnRzID0gbmV3IEFycmF5PEdpdHBvZFBvcnQ+KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgdnNjb2RlRXh0ZW5zaW9ucyA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XG5cbiAgLyoqXG4gICAqIERpcmVjdCBhY2Nlc3MgdG8gdGhlIGdpdHBvZCBjb25maWd1cmF0aW9uIChlc2NhcGUgaGF0Y2gpXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgY29uZmlnOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJvamVjdDogUHJvamVjdCwgb3B0aW9uczogR2l0cG9kT3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIocHJvamVjdCk7XG5cbiAgICB0aGlzLmRvY2tlckltYWdlID0gb3B0aW9ucz8uZG9ja2VySW1hZ2U7XG5cbiAgICBpZiAob3B0aW9ucz8udGFza3MpIHtcbiAgICAgIGZvciAoY29uc3QgdGFzayBvZiBvcHRpb25zLnRhc2tzKSB7XG4gICAgICAgIHRoaXMuYWRkVGFza3ModGFzayk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnM/LnByZWJ1aWxkcykge1xuICAgICAgdGhpcy5hZGRQcmVidWlsZHMob3B0aW9ucy5wcmVidWlsZHMpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zPy5wb3J0cykge1xuICAgICAgdGhpcy5hZGRQb3J0cyguLi5vcHRpb25zLnBvcnRzKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucz8udnNjb2RlRXh0ZW5zaW9ucykge1xuICAgICAgdGhpcy5hZGRWc2NvZGVFeHRlbnNpb25zKC4uLm9wdGlvbnMudnNjb2RlRXh0ZW5zaW9ucyk7XG4gICAgfVxuXG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICBpbWFnZTogKCkgPT4gdGhpcy5yZW5kZXJEb2NrZXJJbWFnZSgpLFxuICAgICAgdGFza3M6IHRoaXMudGFza3MsXG4gICAgICBnaXRodWI6ICgpID0+IHRoaXMucmVuZGVyUHJlYnVpbGRzKCksXG4gICAgICBwb3J0czogdGhpcy5wb3J0cyxcbiAgICAgIHZzY29kZToge1xuICAgICAgICBleHRlbnNpb25zOiB0aGlzLnZzY29kZUV4dGVuc2lvbnMsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBuZXcgWWFtbEZpbGUodGhpcy5wcm9qZWN0LCBHSVRQT0RfRklMRSwge1xuICAgICAgb2JqOiB0aGlzLmNvbmZpZyxcbiAgICAgIG9taXRFbXB0eTogdHJ1ZSxcbiAgICAgIC8vIEdpdFBvZCBuZWVkcyB0byByZWFkIHRoZSBmaWxlIGZyb20gdGhlIHJlcG9zaXRvcnkgaW4gb3JkZXIgdG8gd29yay5cbiAgICAgIGNvbW1pdHRlZDogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gRG9ja2VyIGltYWdlIG9yIERvY2tlcmZpbGUgZm9yIHRoZSBjb250YWluZXIuXG4gICAqXG4gICAqIEBwYXJhbSBpbWFnZSBUaGUgRG9ja2VyIGltYWdlXG4gICAqL1xuICBwdWJsaWMgYWRkRG9ja2VySW1hZ2UoaW1hZ2U6IERldkVudmlyb25tZW50RG9ja2VySW1hZ2UpIHtcbiAgICBpZiAodGhpcy5kb2NrZXJJbWFnZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZG9ja2VySW1hZ2UgY2Fubm90IGJlIHJlZGVmaW5lZC5cIik7XG4gICAgfVxuICAgIHRoaXMuZG9ja2VySW1hZ2UgPSBpbWFnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgdGFza3MgdG8gcnVuIHdoZW4gZ2l0cG9kIHN0YXJ0cy5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgYWxsIHRhc2tzIHdpbGwgYmUgcnVuIGluIHBhcmFsbGVsLiBUbyBydW4gdGFza3MgaW4gc2VxdWVuY2UsXG4gICAqIGNyZWF0ZSBhIG5ldyBgVGFza2AgYW5kIHNwZWNpZnkgdGhlIG90aGVyIHRhc2tzIGFzIHN1YnRhc2tzLlxuICAgKlxuICAgKiBAcGFyYW0gdGFza3MgVGhlIG5ldyB0YXNrc1xuICAgKi9cbiAgcHVibGljIGFkZFRhc2tzKC4uLnRhc2tzOiBUYXNrW10pIHtcbiAgICB0aGlzLnRhc2tzLnB1c2goXG4gICAgICAuLi50YXNrcy5tYXAoKHRhc2spID0+ICh7XG4gICAgICAgIG5hbWU6IHRhc2submFtZSxcbiAgICAgICAgY29tbWFuZDogYG5weCBwcm9qZW4gJHt0YXNrLm5hbWV9YCxcbiAgICAgIH0pKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgcHJlYnVpbGRzIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBHaXRwb2QgQXBwXG4gICAqIEBwYXJhbSBjb25maWcgVGhlIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHB1YmxpYyBhZGRQcmVidWlsZHMoY29uZmlnOiBHaXRwb2RQcmVidWlsZHMpIHtcbiAgICB0aGlzLnByZWJ1aWxkcyA9IGNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB0YXNrIHdpdGggbW9yZSBncmFudWxhciBvcHRpb25zLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBhbGwgdGFza3Mgd2lsbCBiZSBydW4gaW4gcGFyYWxsZWwuIFRvIHJ1biB0YXNrcyBpbiBzZXF1ZW5jZSxcbiAgICogY3JlYXRlIGEgbmV3IGBUYXNrYCBhbmQgc2V0IHRoZSBvdGhlciB0YXNrcyBhcyBzdWJ0YXNrcy5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMgVGhlIHRhc2sgcGFyYW1ldGVyc1xuICAgKi9cbiAgcHVibGljIGFkZEN1c3RvbVRhc2sob3B0aW9uczogR2l0cG9kVGFzaykge1xuICAgIHRoaXMudGFza3MucHVzaCh7XG4gICAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgICBjb21tYW5kOiBvcHRpb25zLmNvbW1hbmQsXG4gICAgICBvcGVuTW9kZTogb3B0aW9ucy5vcGVuTW9kZSxcbiAgICAgIG9wZW5Jbjogb3B0aW9ucy5vcGVuSW4sXG4gICAgICBiZWZvcmU6IG9wdGlvbnMuYmVmb3JlLFxuICAgICAgaW5pdDogb3B0aW9ucy5pbml0LFxuICAgICAgcHJlYnVpbGQ6IG9wdGlvbnMucHJlYnVpbGQsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIHBvcnRzIHRoYXQgc2hvdWxkIGJlIGV4cG9zZWQgKGZvcndhcmRlZCkgZnJvbSB0aGUgY29udGFpbmVyLlxuICAgKlxuICAgKiBAcGFyYW0gcG9ydHMgVGhlIG5ldyBwb3J0c1xuICAgKi9cbiAgcHVibGljIGFkZFBvcnRzKC4uLnBvcnRzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMucG9ydHMucHVzaCguLi5wb3J0cy5tYXAoKHBvcnQpID0+ICh7IHBvcnQ6IHBvcnQgfSkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBsaXN0IG9mIFZTQ29kZSBleHRlbnNpb25zIHRoYXQgc2hvdWxkIGJlIGF1dG9tYXRpY2FsbHkgaW5zdGFsbGVkXG4gICAqIGluIHRoZSBjb250YWluZXIuXG4gICAqXG4gICAqIFRoZXNlIG11c3QgYmUgaW4gdGhlIGZvcm1hdCBkZWZpbmVkIGluIHRoZSBPcGVuIFZTWCByZWdpc3RyeS5cbiAgICogQGV4YW1wbGUgJ3NjYWxhLWxhbmcuc2NhbGFAMC4zLjk6TzVYbWp3WTVHeiswb0RaQW1xbmVKdz09J1xuICAgKiBAc2VlIGh0dHBzOi8vd3d3LmdpdHBvZC5pby9kb2NzL3ZzY29kZS1leHRlbnNpb25zL1xuICAgKlxuICAgKiBAcGFyYW0gZXh0ZW5zaW9ucyBUaGUgZXh0ZW5zaW9uIElEc1xuICAgKi9cbiAgcHVibGljIGFkZFZzY29kZUV4dGVuc2lvbnMoLi4uZXh0ZW5zaW9uczogR2l0cG9kQ29kZUV4dGVuc2lvbklkW10pIHtcbiAgICB0aGlzLnZzY29kZUV4dGVuc2lvbnMucHVzaCguLi5leHRlbnNpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyRG9ja2VySW1hZ2UoKSB7XG4gICAgaWYgKHRoaXMuZG9ja2VySW1hZ2U/LmltYWdlKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb2NrZXJJbWFnZS5pbWFnZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZG9ja2VySW1hZ2U/LmRvY2tlckZpbGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbGU6IHRoaXMuZG9ja2VySW1hZ2UuZG9ja2VyRmlsZSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJQcmVidWlsZHMoKSB7XG4gICAgaWYgKHRoaXMucHJlYnVpbGRzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmVidWlsZHM6IHRoaXMucHJlYnVpbGRzLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWUyBDb2RlIGV4dGVuc2lvbnMgYXMgZGVmaW5lZCBpbiB0aGUgT3BlbiBWU1ggcmVnaXN0cnlcbiAqIEV4YW1wbGU6IGBzY2FsYS1sYW5nLnNjYWxhQDAuMy45Ok81WG1qd1k1R3orMG9EWkFtcW5lSnc9PWBcbiAqL1xudHlwZSBHaXRwb2RDb2RlRXh0ZW5zaW9uSWQgPSBzdHJpbmc7XG4iXX0=