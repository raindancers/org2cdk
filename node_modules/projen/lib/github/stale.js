"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stale = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const stale_util_1 = require("./stale-util");
const workflows_model_1 = require("./workflows-model");
const component_1 = require("../component");
/**
 * Warns and then closes issues and PRs that have had no activity for a specified amount of time.
 *
 * The default configuration will:
 *
 *  * Add a "Stale" label to pull requests after 14 days and closed after 2 days
 *  * Add a "Stale" label to issues after 60 days and closed after 7 days
 *  * If a comment is added, the label will be removed and timer is restarted.
 *
 * @see https://github.com/actions/stale
 */
class Stale extends component_1.Component {
    constructor(github, options = {}) {
        super(github.project);
        const stale = github.addWorkflow("stale");
        stale.on({
            schedule: [{ cron: "0 1 * * *" }],
            workflowDispatch: {},
        });
        const pullRequests = (0, stale_util_1.renderBehavior)(options.pullRequest, {
            stale: 14,
            close: 2,
            type: "pull request",
        });
        const issues = (0, stale_util_1.renderBehavior)(options.issues, {
            stale: 60,
            close: 7,
            type: "issue",
        });
        const renderExemptLabels = (exemptLabels) => {
            if (!exemptLabels || exemptLabels.length === 0) {
                return undefined;
            }
            return exemptLabels.join(",");
        };
        stale.addJobs({
            stale: {
                runsOn: options.runsOn ?? ["ubuntu-latest"],
                permissions: {
                    issues: workflows_model_1.JobPermission.WRITE,
                    pullRequests: workflows_model_1.JobPermission.WRITE,
                },
                steps: [
                    {
                        uses: "actions/stale@v4",
                        with: {
                            // disable global
                            "days-before-stale": -1,
                            "days-before-close": -1,
                            // pull requests
                            "days-before-pr-stale": pullRequests.daysBeforeStale,
                            "days-before-pr-close": pullRequests.daysBeforeClose,
                            "stale-pr-message": pullRequests.staleMessage,
                            "close-pr-message": pullRequests.closeMessage,
                            "stale-pr-label": pullRequests.staleLabel,
                            "exempt-pr-labels": renderExemptLabels(pullRequests.exemptLabels),
                            // issues
                            "days-before-issue-stale": issues.daysBeforeStale,
                            "days-before-issue-close": issues.daysBeforeClose,
                            "stale-issue-message": issues.staleMessage,
                            "close-issue-message": issues.closeMessage,
                            "stale-issue-label": issues.staleLabel,
                            "exempt-issue-labels": renderExemptLabels(issues.exemptLabels),
                        },
                    },
                ],
            },
        });
    }
}
_a = JSII_RTTI_SYMBOL_1;
Stale[_a] = { fqn: "projen.github.Stale", version: "0.71.82" };
exports.Stale = Stale;
//# sourceMappingURL=data:application/json;base64,