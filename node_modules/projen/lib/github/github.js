"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitHub = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const actions_provider_1 = require("./actions-provider");
const dependabot_1 = require("./dependabot");
const github_credentials_1 = require("./github-credentials");
const mergify_1 = require("./mergify");
const pr_template_1 = require("./pr-template");
const pull_request_lint_1 = require("./pull-request-lint");
const workflows_1 = require("./workflows");
const component_1 = require("../component");
class GitHub extends component_1.Component {
    /**
     * Returns the `GitHub` component of a project or `undefined` if the project
     * does not have a GitHub component.
     */
    static of(project) {
        const isGitHub = (c) => c instanceof GitHub;
        return project.components.find(isGitHub);
    }
    constructor(project, options = {}) {
        super(project);
        this.actions = new actions_provider_1.GitHubActionsProvider();
        this.workflowsEnabled = options.workflows ?? true;
        this._downloadLfs = options.downloadLfs;
        if (options.projenCredentials && options.projenTokenSecret) {
            throw new Error("projenTokenSecret is deprecated, please use projenCredentials instead");
        }
        if (options.projenTokenSecret) {
            this.projenCredentials = github_credentials_1.GithubCredentials.fromPersonalAccessToken({
                secret: options.projenTokenSecret,
            });
        }
        else if (options.projenCredentials) {
            this.projenCredentials = options.projenCredentials;
        }
        else {
            this.projenCredentials = github_credentials_1.GithubCredentials.fromPersonalAccessToken({
                secret: "PROJEN_GITHUB_TOKEN",
            });
        }
        if (options.mergify ?? true) {
            this.mergify = new mergify_1.Mergify(this, options.mergifyOptions);
        }
        if (options.pullRequestLint ?? true) {
            new pull_request_lint_1.PullRequestLint(this, options.pullRequestLintOptions);
        }
    }
    /**
     * All workflows.
     */
    get workflows() {
        const isWorkflow = (c) => c instanceof workflows_1.GithubWorkflow;
        return this.project.components
            .filter(isWorkflow)
            .sort((w1, w2) => w1.name.localeCompare(w2.name));
    }
    /**
     * Adds a workflow to the project.
     * @param name Name of the workflow
     * @returns a GithubWorkflow instance
     */
    addWorkflow(name) {
        const workflow = new workflows_1.GithubWorkflow(this, name);
        return workflow;
    }
    addPullRequestTemplate(...content) {
        return new pr_template_1.PullRequestTemplate(this, { lines: content });
    }
    addDependabot(options) {
        return new dependabot_1.Dependabot(this, options);
    }
    /**
     * Finds a GitHub workflow by name. Returns `undefined` if the workflow cannot be found.
     * @param name The name of the GitHub workflow
     */
    tryFindWorkflow(name) {
        return this.workflows.find((w) => w.name === name);
    }
    /**
     * Whether downloading from LFS is enabled for this GitHub project
     */
    get downloadLfs() {
        return this._downloadLfs ?? this.project.gitattributes.hasLfsPatterns;
    }
}
_a = JSII_RTTI_SYMBOL_1;
GitHub[_a] = { fqn: "projen.github.GitHub", version: "0.71.82" };
exports.GitHub = GitHub;
//# sourceMappingURL=data:application/json;base64,