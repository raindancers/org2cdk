"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowJobs = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const _1 = require(".");
const constants_1 = require("./constants");
/**
 * A set of utility functions for creating jobs in GitHub Workflows.
 */
class WorkflowJobs {
    /**
     * Creates a pull request with the changes of a patch file.
     *
     * @returns Job
     */
    static pullRequestFromPatch(options) {
        const jobName = options.jobName ?? "Create Pull Request";
        const runsOn = options.runsOn ?? ["ubuntu-latest"];
        const gitIdentity = options.gitIdentity ?? constants_1.DEFAULT_GITHUB_ACTIONS_USER;
        const steps = [
            ...(options.credentials?.setupSteps || []),
            ..._1.WorkflowActions.checkoutWithPatch(options.patch),
            ..._1.WorkflowActions.setupGitIdentity(gitIdentity),
            ..._1.WorkflowActions.createPullRequest({
                ...options,
                gitIdentity,
            }),
        ];
        return {
            name: jobName,
            if: `\${{ needs.${options.patch.jobId}.outputs.${options.patch.outputName} }}`,
            needs: [options.patch.jobId],
            permissions: {
                contents: _1.workflows.JobPermission.READ,
            },
            runsOn,
            steps,
        };
    }
}
_a = JSII_RTTI_SYMBOL_1;
WorkflowJobs[_a] = { fqn: "projen.github.WorkflowJobs", version: "0.71.82" };
exports.WorkflowJobs = WorkflowJobs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2Zsb3ctam9icy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9naXRodWIvd29ya2Zsb3ctam9icy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdCQUtXO0FBQ1gsMkNBQTBEO0FBRzFEOztHQUVHO0FBQ0gsTUFBYSxZQUFZO0lBQ3ZCOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsb0JBQW9CLENBQ2hDLE9BQW9DO1FBRXBDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUkscUJBQXFCLENBQUM7UUFDekQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLElBQUksdUNBQTJCLENBQUM7UUFFdkUsTUFBTSxLQUFLLEdBQWM7WUFDdkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsVUFBVSxJQUFJLEVBQUUsQ0FBQztZQUMxQyxHQUFHLGtCQUFlLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUNuRCxHQUFHLGtCQUFlLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO1lBQ2hELEdBQUcsa0JBQWUsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDbkMsR0FBRyxPQUFPO2dCQUNWLFdBQVc7YUFDWixDQUFDO1NBQ0gsQ0FBQztRQUVGLE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTztZQUNiLEVBQUUsRUFBRSxjQUFjLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxZQUFZLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxLQUFLO1lBQzlFLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQzVCLFdBQVcsRUFBRTtnQkFDWCxRQUFRLEVBQUUsWUFBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJO2FBQ3ZDO1lBQ0QsTUFBTTtZQUNOLEtBQUs7U0FDTixDQUFDO0lBQ0osQ0FBQzs7OztBQWpDVSxvQ0FBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoZWNrb3V0V2l0aFBhdGNoT3B0aW9ucyxcbiAgQ3JlYXRlUHVsbFJlcXVlc3RPcHRpb25zLFxuICBXb3JrZmxvd0FjdGlvbnMsXG4gIHdvcmtmbG93cyxcbn0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IERFRkFVTFRfR0lUSFVCX0FDVElPTlNfVVNFUiB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgSm9iLCBKb2JTdGVwIH0gZnJvbSBcIi4vd29ya2Zsb3dzLW1vZGVsXCI7XG5cbi8qKlxuICogQSBzZXQgb2YgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIGNyZWF0aW5nIGpvYnMgaW4gR2l0SHViIFdvcmtmbG93cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFdvcmtmbG93Sm9icyB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcHVsbCByZXF1ZXN0IHdpdGggdGhlIGNoYW5nZXMgb2YgYSBwYXRjaCBmaWxlLlxuICAgKlxuICAgKiBAcmV0dXJucyBKb2JcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcHVsbFJlcXVlc3RGcm9tUGF0Y2goXG4gICAgb3B0aW9uczogUHVsbFJlcXVlc3RGcm9tUGF0Y2hPcHRpb25zXG4gICk6IEpvYiB7XG4gICAgY29uc3Qgam9iTmFtZSA9IG9wdGlvbnMuam9iTmFtZSA/PyBcIkNyZWF0ZSBQdWxsIFJlcXVlc3RcIjtcbiAgICBjb25zdCBydW5zT24gPSBvcHRpb25zLnJ1bnNPbiA/PyBbXCJ1YnVudHUtbGF0ZXN0XCJdO1xuICAgIGNvbnN0IGdpdElkZW50aXR5ID0gb3B0aW9ucy5naXRJZGVudGl0eSA/PyBERUZBVUxUX0dJVEhVQl9BQ1RJT05TX1VTRVI7XG5cbiAgICBjb25zdCBzdGVwczogSm9iU3RlcFtdID0gW1xuICAgICAgLi4uKG9wdGlvbnMuY3JlZGVudGlhbHM/LnNldHVwU3RlcHMgfHwgW10pLFxuICAgICAgLi4uV29ya2Zsb3dBY3Rpb25zLmNoZWNrb3V0V2l0aFBhdGNoKG9wdGlvbnMucGF0Y2gpLFxuICAgICAgLi4uV29ya2Zsb3dBY3Rpb25zLnNldHVwR2l0SWRlbnRpdHkoZ2l0SWRlbnRpdHkpLFxuICAgICAgLi4uV29ya2Zsb3dBY3Rpb25zLmNyZWF0ZVB1bGxSZXF1ZXN0KHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZ2l0SWRlbnRpdHksXG4gICAgICB9KSxcbiAgICBdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGpvYk5hbWUsXG4gICAgICBpZjogYFxcJHt7IG5lZWRzLiR7b3B0aW9ucy5wYXRjaC5qb2JJZH0ub3V0cHV0cy4ke29wdGlvbnMucGF0Y2gub3V0cHV0TmFtZX0gfX1gLFxuICAgICAgbmVlZHM6IFtvcHRpb25zLnBhdGNoLmpvYklkXSxcbiAgICAgIHBlcm1pc3Npb25zOiB7XG4gICAgICAgIGNvbnRlbnRzOiB3b3JrZmxvd3MuSm9iUGVybWlzc2lvbi5SRUFELFxuICAgICAgfSxcbiAgICAgIHJ1bnNPbixcbiAgICAgIHN0ZXBzLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBQdWxsUmVxdWVzdFBhdGNoU291cmNlIGV4dGVuZHMgQ2hlY2tvdXRXaXRoUGF0Y2hPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgam9iIHRoYXQgY3JlYXRlZCB0aGUgcGF0Y2ggZmlsZVxuICAgKi9cbiAgcmVhZG9ubHkgam9iSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIG91dHB1dCB0aGF0IGluZGljYXRlcyBpZiBhIHBhdGNoIGhhcyBiZWVuIGNyZWF0ZWRcbiAgICovXG4gIHJlYWRvbmx5IG91dHB1dE5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQdWxsUmVxdWVzdEZyb21QYXRjaE9wdGlvbnMgZXh0ZW5kcyBDcmVhdGVQdWxsUmVxdWVzdE9wdGlvbnMge1xuICAvKipcbiAgICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIHBhdGNoIHRoYXQgaXMgdXNlZCB0byBjcmVhdGUgdGhlIHB1bGwgcmVxdWVzdC5cbiAgICovXG4gIHJlYWRvbmx5IHBhdGNoOiBQdWxsUmVxdWVzdFBhdGNoU291cmNlO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgam9iIGRpc3BsYXllZCBvbiBHaXRIdWIuXG4gICAqIEBkZWZhdWx0IFwiQ3JlYXRlIFB1bGwgUmVxdWVzdFwiXG4gICAqL1xuICByZWFkb25seSBqb2JOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBHaXRodWIgUnVubmVyIHNlbGVjdGlvbiBsYWJlbHNcbiAgICogQGRlZmF1bHQgW1widWJ1bnR1LWxhdGVzdFwiXVxuICAgKi9cbiAgcmVhZG9ubHkgcnVuc09uPzogc3RyaW5nW107XG59XG4iXX0=