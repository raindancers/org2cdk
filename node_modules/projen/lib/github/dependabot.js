"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dependabot = exports.VersioningStrategy = exports.DependabotScheduleInterval = exports.DependabotRegistryType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("../component");
const util_1 = require("../util");
const yaml_1 = require("../yaml");
/**
 * Each configuration type requires you to provide particular settings.
 * Some types allow more than one way to connect
 * @see https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#configuration-options-for-private-registries
 */
var DependabotRegistryType;
(function (DependabotRegistryType) {
    /**
     * The composer-repository type supports username and password.
     * @see https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#composer-repository
     */
    DependabotRegistryType["COMPOSER_REGISTRY"] = "composer-registry";
    /**
     * The docker-registry type supports username and password.
     * The docker-registry type can also be used to pull from Amazon ECR using static AWS credentials
     * @see https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#docker-registry
     */
    DependabotRegistryType["DOCKER_REGISTRY"] = "docker-registry";
    /**
     * The git type supports username and password
     * @see https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#git
     */
    DependabotRegistryType["GIT"] = "git";
    /**
     * The hex-organization type supports organization and key
     * @see https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#hex-organization
     */
    DependabotRegistryType["HEX_ORGANIZATION"] = "hex-organization";
    /**
     * The maven-repository type supports username and password, or token
     * @see https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#maven-repository
     */
    DependabotRegistryType["MAVEN_REPOSITORY"] = "maven-repository";
    /**
     * The npm-registry type supports username and password, or token
     * @see https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#npm-registry
     */
    DependabotRegistryType["NPM_REGISTRY"] = "npm-registry";
    /**
     * The nuget-feed type supports username and password, or token
     * @see https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#nuget-feed
     */
    DependabotRegistryType["NUGET_FEED"] = "nuget-feed";
    /**
     * The python-index type supports username and password, or token
     * @see https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#python-index
     */
    DependabotRegistryType["PYTHON_INDEX"] = "python-index";
    /**
     * The rubygems-server type supports username and password, or token
     * @see https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#rubygems-server
     */
    DependabotRegistryType["RUBYGEMS_SERVER"] = "rubygems-server";
    /**
     * The terraform-registry type supports a token
     * @see https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#terraform-registry
     */
    DependabotRegistryType["TERRAFORM_REGISTRY"] = "terraform-registry";
})(DependabotRegistryType = exports.DependabotRegistryType || (exports.DependabotRegistryType = {}));
/**
 * How often to check for new versions and raise pull requests for version
 * updates.
 */
var DependabotScheduleInterval;
(function (DependabotScheduleInterval) {
    /**
     * Runs on every weekday, Monday to Friday.
     */
    DependabotScheduleInterval["DAILY"] = "daily";
    /**
     * Runs once each week. By default, this is on Monday.
     */
    DependabotScheduleInterval["WEEKLY"] = "weekly";
    /**
     * Runs once each month. This is on the first day of the month.
     */
    DependabotScheduleInterval["MONTHLY"] = "monthly";
})(DependabotScheduleInterval = exports.DependabotScheduleInterval || (exports.DependabotScheduleInterval = {}));
/**
 * The strategy to use when edits manifest and lock files.
 */
var VersioningStrategy;
(function (VersioningStrategy) {
    /**
     * Only create pull requests to update lockfiles updates. Ignore any new
     * versions that would require package manifest changes.
     */
    VersioningStrategy["LOCKFILE_ONLY"] = "lockfile-only";
    /**
     * - For apps, the version requirements are increased.
     * - For libraries, the range of versions is widened.
     */
    VersioningStrategy["AUTO"] = "auto";
    /**
     * Relax the version requirement to include both the new and old version, when
     * possible.
     */
    VersioningStrategy["WIDEN"] = "widen";
    /**
     * Always increase the version requirement to match the new version.
     */
    VersioningStrategy["INCREASE"] = "increase";
    /**
     * Increase the version requirement only when required by the new version.
     */
    VersioningStrategy["INCREASE_IF_NECESSARY"] = "increase-if-necessary";
})(VersioningStrategy = exports.VersioningStrategy || (exports.VersioningStrategy = {}));
/**
 * Defines dependabot configuration for node projects.
 *
 * Since module versions are managed in projen, the versioning strategy will be
 * configured to "lockfile-only" which means that only updates that can be done
 * on the lockfile itself will be proposed.
 */
class Dependabot extends component_1.Component {
    constructor(github, options = {}) {
        super(github.project);
        const project = github.project;
        this.ignore = [];
        this.ignoresProjen = options.ignoreProjen ?? true;
        const registries = options.registries
            ? (0, util_1.kebabCaseKeys)(options.registries)
            : undefined;
        this.config = {
            version: 2,
            registries,
            updates: [
                {
                    "package-ecosystem": "npm",
                    "versioning-strategy": "lockfile-only",
                    directory: "/",
                    schedule: {
                        interval: options.scheduleInterval ?? DependabotScheduleInterval.DAILY,
                    },
                    ignore: () => (this.ignore.length > 0 ? this.ignore : undefined),
                    labels: options.labels ? options.labels : undefined,
                    registries: registries ? Object.keys(registries) : undefined,
                },
            ],
        };
        new yaml_1.YamlFile(project, ".github/dependabot.yml", {
            obj: this.config,
            committed: true,
        });
        for (const i of options.ignore ?? []) {
            this.addIgnore(i.dependencyName, ...(i.versions ?? []));
        }
        if (this.ignoresProjen) {
            this.addIgnore("projen");
        }
    }
    /**
     * Ignores a dependency from automatic updates.
     *
     * @param dependencyName Use to ignore updates for dependencies with matching
     * names, optionally using `*` to match zero or more characters.
     * @param versions Use to ignore specific versions or ranges of versions. If
     * you want to define a range, use the standard pattern for the package
     * manager (for example: `^1.0.0` for npm, or `~> 2.0` for Bundler).
     */
    addIgnore(dependencyName, ...versions) {
        this.ignore.push({
            "dependency-name": dependencyName,
            versions: () => (versions.length > 0 ? versions : undefined),
        });
    }
}
_a = JSII_RTTI_SYMBOL_1;
Dependabot[_a] = { fqn: "projen.github.Dependabot", version: "0.71.82" };
exports.Dependabot = Dependabot;
//# sourceMappingURL=data:application/json;base64,