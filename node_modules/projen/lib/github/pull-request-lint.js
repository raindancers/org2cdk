"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PullRequestLint = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const workflows_model_1 = require("./workflows-model");
const component_1 = require("../component");
/**
 * Configure validations to run on GitHub pull requests.
 * Only generates a file if at least one linter is configured.
 */
class PullRequestLint extends component_1.Component {
    constructor(github, options = {}) {
        super(github.project);
        // should only create a workflow if one or more linters are enabled
        if (options.semanticTitle ?? true) {
            const opts = options.semanticTitleOptions ?? {};
            const types = opts.types ?? ["feat", "fix", "chore"];
            const validateJob = {
                name: "Validate PR title",
                runsOn: options.runsOn ?? ["ubuntu-latest"],
                permissions: {
                    pullRequests: workflows_model_1.JobPermission.WRITE,
                },
                steps: [
                    {
                        uses: "amannn/action-semantic-pull-request@v5.0.2",
                        env: {
                            GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}",
                        },
                        with: {
                            types: types.join("\n"),
                            requireScope: opts.requireScope ?? false,
                        },
                    },
                ],
            };
            const workflow = github.addWorkflow("pull-request-lint");
            workflow.on({
                pullRequestTarget: {
                    types: [
                        "labeled",
                        "opened",
                        "synchronize",
                        "reopened",
                        "ready_for_review",
                        "edited",
                    ],
                },
            });
            workflow.addJobs({ validate: validateJob });
        }
    }
}
_a = JSII_RTTI_SYMBOL_1;
PullRequestLint[_a] = { fqn: "projen.github.PullRequestLint", version: "0.71.82" };
exports.PullRequestLint = PullRequestLint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsbC1yZXF1ZXN0LWxpbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2l0aHViL3B1bGwtcmVxdWVzdC1saW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsdURBQXVEO0FBQ3ZELDRDQUF5QztBQThDekM7OztHQUdHO0FBQ0gsTUFBYSxlQUFnQixTQUFRLHFCQUFTO0lBQzVDLFlBQVksTUFBYyxFQUFFLFVBQWtDLEVBQUU7UUFDOUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0QixtRUFBbUU7UUFDbkUsSUFBSSxPQUFPLENBQUMsYUFBYSxJQUFJLElBQUksRUFBRTtZQUNqQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsb0JBQW9CLElBQUksRUFBRSxDQUFDO1lBQ2hELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRXJELE1BQU0sV0FBVyxHQUFRO2dCQUN2QixJQUFJLEVBQUUsbUJBQW1CO2dCQUN6QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQztnQkFDM0MsV0FBVyxFQUFFO29CQUNYLFlBQVksRUFBRSwrQkFBYSxDQUFDLEtBQUs7aUJBQ2xDO2dCQUNELEtBQUssRUFBRTtvQkFDTDt3QkFDRSxJQUFJLEVBQUUsNENBQTRDO3dCQUNsRCxHQUFHLEVBQUU7NEJBQ0gsWUFBWSxFQUFFLDZCQUE2Qjt5QkFDNUM7d0JBQ0QsSUFBSSxFQUFFOzRCQUNKLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs0QkFDdkIsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLElBQUksS0FBSzt5QkFDekM7cUJBQ0Y7aUJBQ0Y7YUFDRixDQUFDO1lBRUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3pELFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQ1YsaUJBQWlCLEVBQUU7b0JBQ2pCLEtBQUssRUFBRTt3QkFDTCxTQUFTO3dCQUNULFFBQVE7d0JBQ1IsYUFBYTt3QkFDYixVQUFVO3dCQUNWLGtCQUFrQjt3QkFDbEIsUUFBUTtxQkFDVDtpQkFDRjthQUNGLENBQUMsQ0FBQztZQUNILFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7Ozs7QUE1Q1UsMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHaXRIdWIgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgSm9iLCBKb2JQZXJtaXNzaW9uIH0gZnJvbSBcIi4vd29ya2Zsb3dzLW1vZGVsXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50XCI7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgUHVsbFJlcXVlc3RMaW50XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHVsbFJlcXVlc3RMaW50T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBWYWxpZGF0ZSB0aGF0IHB1bGwgcmVxdWVzdCB0aXRsZXMgZm9sbG93IENvbnZlbnRpb25hbCBDb21taXRzLlxuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cuY29udmVudGlvbmFsY29tbWl0cy5vcmcvXG4gICAqL1xuICByZWFkb25seSBzZW1hbnRpY1RpdGxlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogT3B0aW9ucyBmb3IgdmFsaWRhdGluZyB0aGUgY29udmVudGlvbmFsIGNvbW1pdCB0aXRsZSBsaW50ZXIuXG4gICAqIEBkZWZhdWx0IC0gdGl0bGUgbXVzdCBzdGFydCB3aXRoIFwiZmVhdFwiLCBcImZpeFwiLCBvciBcImNob3JlXCJcbiAgICovXG4gIHJlYWRvbmx5IHNlbWFudGljVGl0bGVPcHRpb25zPzogU2VtYW50aWNUaXRsZU9wdGlvbnM7XG5cbiAgLyoqXG4gICAqIEdpdGh1YiBSdW5uZXIgc2VsZWN0aW9uIGxhYmVsc1xuICAgKiBAZGVmYXVsdCBbXCJ1YnVudHUtbGF0ZXN0XCJdXG4gICAqL1xuICByZWFkb25seSBydW5zT24/OiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBsaW50aW5nIHRoYXQgUFIgdGl0bGVzIGZvbGxvdyBDb252ZW50aW9uYWwgQ29tbWl0cy5cbiAqIEBzZWUgaHR0cHM6Ly93d3cuY29udmVudGlvbmFsY29tbWl0cy5vcmcvXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VtYW50aWNUaXRsZU9wdGlvbnMge1xuICAvKipcbiAgICogQ29uZmlndXJlIGEgbGlzdCBvZiBjb21taXQgdHlwZXMgdGhhdCBhcmUgYWxsb3dlZC5cbiAgICogQGRlZmF1bHQgW1wiZmVhdFwiLCBcImZpeFwiLCBcImNob3JlXCJdXG4gICAqL1xuICByZWFkb25seSB0eXBlcz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmUgdGhhdCBhIHNjb3BlIG11c3QgYWx3YXlzIGJlIHByb3ZpZGVkLlxuICAgKiBlLmcuIGZlYXQodWkpLCBmaXgoY29yZSlcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHJlcXVpcmVTY29wZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQ29uZmlndXJlIHZhbGlkYXRpb25zIHRvIHJ1biBvbiBHaXRIdWIgcHVsbCByZXF1ZXN0cy5cbiAqIE9ubHkgZ2VuZXJhdGVzIGEgZmlsZSBpZiBhdCBsZWFzdCBvbmUgbGludGVyIGlzIGNvbmZpZ3VyZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBQdWxsUmVxdWVzdExpbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihnaXRodWI6IEdpdEh1Yiwgb3B0aW9uczogUHVsbFJlcXVlc3RMaW50T3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoZ2l0aHViLnByb2plY3QpO1xuXG4gICAgLy8gc2hvdWxkIG9ubHkgY3JlYXRlIGEgd29ya2Zsb3cgaWYgb25lIG9yIG1vcmUgbGludGVycyBhcmUgZW5hYmxlZFxuICAgIGlmIChvcHRpb25zLnNlbWFudGljVGl0bGUgPz8gdHJ1ZSkge1xuICAgICAgY29uc3Qgb3B0cyA9IG9wdGlvbnMuc2VtYW50aWNUaXRsZU9wdGlvbnMgPz8ge307XG4gICAgICBjb25zdCB0eXBlcyA9IG9wdHMudHlwZXMgPz8gW1wiZmVhdFwiLCBcImZpeFwiLCBcImNob3JlXCJdO1xuXG4gICAgICBjb25zdCB2YWxpZGF0ZUpvYjogSm9iID0ge1xuICAgICAgICBuYW1lOiBcIlZhbGlkYXRlIFBSIHRpdGxlXCIsXG4gICAgICAgIHJ1bnNPbjogb3B0aW9ucy5ydW5zT24gPz8gW1widWJ1bnR1LWxhdGVzdFwiXSxcbiAgICAgICAgcGVybWlzc2lvbnM6IHtcbiAgICAgICAgICBwdWxsUmVxdWVzdHM6IEpvYlBlcm1pc3Npb24uV1JJVEUsXG4gICAgICAgIH0sXG4gICAgICAgIHN0ZXBzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdXNlczogXCJhbWFubm4vYWN0aW9uLXNlbWFudGljLXB1bGwtcmVxdWVzdEB2NS4wLjJcIixcbiAgICAgICAgICAgIGVudjoge1xuICAgICAgICAgICAgICBHSVRIVUJfVE9LRU46IFwiJHt7IHNlY3JldHMuR0lUSFVCX1RPS0VOIH19XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2l0aDoge1xuICAgICAgICAgICAgICB0eXBlczogdHlwZXMuam9pbihcIlxcblwiKSxcbiAgICAgICAgICAgICAgcmVxdWlyZVNjb3BlOiBvcHRzLnJlcXVpcmVTY29wZSA/PyBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHdvcmtmbG93ID0gZ2l0aHViLmFkZFdvcmtmbG93KFwicHVsbC1yZXF1ZXN0LWxpbnRcIik7XG4gICAgICB3b3JrZmxvdy5vbih7XG4gICAgICAgIHB1bGxSZXF1ZXN0VGFyZ2V0OiB7XG4gICAgICAgICAgdHlwZXM6IFtcbiAgICAgICAgICAgIFwibGFiZWxlZFwiLFxuICAgICAgICAgICAgXCJvcGVuZWRcIixcbiAgICAgICAgICAgIFwic3luY2hyb25pemVcIixcbiAgICAgICAgICAgIFwicmVvcGVuZWRcIixcbiAgICAgICAgICAgIFwicmVhZHlfZm9yX3Jldmlld1wiLFxuICAgICAgICAgICAgXCJlZGl0ZWRcIixcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICB3b3JrZmxvdy5hZGRKb2JzKHsgdmFsaWRhdGU6IHZhbGlkYXRlSm9iIH0pO1xuICAgIH1cbiAgfVxufVxuIl19