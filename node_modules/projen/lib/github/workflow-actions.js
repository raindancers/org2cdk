"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowActions = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("./constants");
function context(value) {
    return `\${{ ${value} }}`;
}
const REPO = context("github.repository");
const RUN_ID = context("github.run_id");
const RUN_URL = `https://github.com/${REPO}/actions/runs/${RUN_ID}`;
const GIT_PATCH_FILE_DEFAULT = ".repo.patch";
const RUNNER_TEMP = "${{ runner.temp }}";
/**
 * A set of utility functions for creating GitHub actions in workflows.
 */
class WorkflowActions {
    /**
     * Creates a .patch file from the current git diff and uploads it as an
     * artifact. Use `checkoutWithPatch` to download and apply in another job.
     *
     * If a patch was uploaded, the action can optionally fail the job.
     *
     * @param options Options
     * @returns Job steps
     */
    static uploadGitPatch(options) {
        const MUTATIONS_FOUND = `steps.${options.stepId}.outputs.${options.outputName}`;
        const GIT_PATCH_FILE = options.patchFile ?? GIT_PATCH_FILE_DEFAULT;
        const steps = [
            {
                id: options.stepId,
                name: options.stepName ?? "Find mutations",
                run: [
                    "git add .",
                    `git diff --staged --patch --exit-code > ${GIT_PATCH_FILE} || echo "${options.outputName}=true" >> $GITHUB_OUTPUT`,
                ].join("\n"),
            },
            {
                if: MUTATIONS_FOUND,
                name: "Upload patch",
                uses: "actions/upload-artifact@v3",
                with: { name: GIT_PATCH_FILE, path: GIT_PATCH_FILE },
            },
        ];
        if (options.mutationError) {
            steps.push({
                name: "Fail build on mutation",
                if: MUTATIONS_FOUND,
                run: [
                    `echo "::error::${options.mutationError}"`,
                    `cat ${GIT_PATCH_FILE}`,
                    "exit 1",
                ].join("\n"),
            });
        }
        return steps;
    }
    /**
     * Checks out a repository and applies a git patch that was created using
     * `uploadGitPatch`.
     *
     * @param options Options
     * @returns Job steps
     */
    static checkoutWithPatch(options = {}) {
        const GIT_PATCH_FILE = options.patchFile ?? GIT_PATCH_FILE_DEFAULT;
        return [
            {
                name: "Checkout",
                uses: "actions/checkout@v3",
                with: {
                    token: options.token,
                    ref: options.ref,
                    repository: options.repository,
                    ...(options.lfs ? { lfs: true } : {}),
                },
            },
            {
                name: "Download patch",
                uses: "actions/download-artifact@v3",
                with: { name: GIT_PATCH_FILE, path: RUNNER_TEMP },
            },
            {
                name: "Apply patch",
                run: `[ -s ${RUNNER_TEMP}/${GIT_PATCH_FILE} ] && git apply ${RUNNER_TEMP}/${GIT_PATCH_FILE} || echo "Empty patch. Skipping."`,
            },
        ];
    }
    /**
     * Configures the git identity (user name and email).
     * @param id The identity to use
     * @returns Job steps
     */
    static setupGitIdentity(id) {
        return [
            {
                name: "Set git identity",
                run: [
                    `git config user.name "${id.name}"`,
                    `git config user.email "${id.email}"`,
                ].join("\n"),
            },
        ];
    }
    /**
     * A step that creates a pull request based on the current repo state.
     *
     * @param options Options
     * @returns Job steps
     */
    static createPullRequest(options) {
        const workflowName = options.workflowName;
        const branchName = options.branchName ?? `github-actions/${workflowName}`;
        const stepId = options.stepId ?? "create-pr";
        const stepName = options.stepName ?? "Create Pull Request";
        const gitIdentity = options.gitIdentity ?? constants_1.DEFAULT_GITHUB_ACTIONS_USER;
        const committer = `${gitIdentity.name} <${gitIdentity.email}>`;
        const pullRequestDescription = options.pullRequestDescription
            .trimEnd()
            .endsWith(".")
            ? options.pullRequestDescription.trimEnd()
            : `${options.pullRequestDescription.trimEnd()}.`;
        const title = options.pullRequestTitle;
        const description = [
            `${pullRequestDescription} See details in [workflow run].`,
            "",
            `[Workflow Run]: ${RUN_URL}`,
            "",
            "------",
            "",
            `*Automatically created by projen via the "${workflowName}" workflow*`,
        ].join("\n");
        return [
            {
                name: stepName,
                id: stepId,
                uses: "peter-evans/create-pull-request@v4",
                with: {
                    token: options.credentials?.tokenRef,
                    "commit-message": `${title}\n\n${description}`,
                    branch: branchName,
                    base: options.baseBranch,
                    title: title,
                    labels: options.labels?.join(",") || undefined,
                    assignees: options.assignees?.join(",") || undefined,
                    body: description,
                    author: committer,
                    committer: committer,
                    signoff: options.signoff ?? true,
                },
            },
        ];
    }
}
_a = JSII_RTTI_SYMBOL_1;
WorkflowActions[_a] = { fqn: "projen.github.WorkflowActions", version: "0.71.82" };
exports.WorkflowActions = WorkflowActions;
//# sourceMappingURL=data:application/json;base64,