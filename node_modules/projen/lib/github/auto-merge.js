"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoMerge = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("../component");
/**
 * Sets up mergify to merging approved pull requests.
 *
 * If `buildJob` is specified, the specified GitHub workflow job ID is required
 * to succeed in order for the PR to be merged.
 *
 * `approvedReviews` specified the number of code review approvals required for
 * the PR to be merged.
 */
class AutoMerge extends component_1.Component {
    constructor(github, options = {}) {
        super(github.project);
        this.lazyConditions = new Array();
        const mergify = github.mergify;
        if (!mergify) {
            throw new Error("auto merging requires mergify to be enabled");
        }
        const blockingLabels = options.blockingLabels ?? ["do-not-merge"];
        const blockingCondition = blockingLabels?.length
            ? [`-label~=(${blockingLabels.join("|")})`]
            : [];
        const mergeAction = {
            delete_head_branch: {},
            queue: {
                // squash all commits into a single commit when merging
                // method: "squash",
                method: "squash",
                name: "default",
                // use PR title+body as the commit message
                commit_message_template: [
                    "{{ title }} (#{{ number }})",
                    "",
                    "{{ body }}",
                ].join("\n"),
            },
        };
        const approvedReviews = options.approvedReviews ?? 1;
        // add initial conditions (additional conditions can be added later)
        this.addConditions(`#approved-reviews-by>=${approvedReviews}`);
        this.addConditions(...blockingCondition);
        mergify.addRule({
            name: "Automatic merge on approval and successful build",
            actions: mergeAction,
            conditions: (() => this.renderConditions()),
        });
        mergify.addQueue({
            name: "default",
            updateMethod: "merge",
            conditions: (() => this.renderConditions()),
        });
        this.project.addPackageIgnore("/.mergify.yml");
    }
    /**
     * Adds conditions to the auto merge rule.
     * @param conditions The conditions to add (mergify syntax)
     */
    addConditions(...conditions) {
        this.addConditionsLater({ render: () => conditions });
    }
    /**
     * Adds conditions that will be rendered only during synthesis.
     * @param later The later
     */
    addConditionsLater(later) {
        this.lazyConditions.push(later);
    }
    renderConditions() {
        const output = new Array();
        for (const later of this.lazyConditions) {
            output.push(...later.render());
        }
        return output;
    }
}
_a = JSII_RTTI_SYMBOL_1;
AutoMerge[_a] = { fqn: "projen.github.AutoMerge", version: "0.71.82" };
exports.AutoMerge = AutoMerge;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1tZXJnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9naXRodWIvYXV0by1tZXJnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDRDQUF5QztBQWdCekM7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFhLFNBQVUsU0FBUSxxQkFBUztJQUd0QyxZQUFZLE1BQWMsRUFBRSxVQUE0QixFQUFFO1FBQ3hELEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFIUCxtQkFBYyxHQUFHLElBQUksS0FBSyxFQUF1QixDQUFDO1FBS2pFLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDL0IsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztTQUNoRTtRQUVELE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxjQUFjLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNsRSxNQUFNLGlCQUFpQixHQUFHLGNBQWMsRUFBRSxNQUFNO1lBQzlDLENBQUMsQ0FBQyxDQUFDLFlBQVksY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQzNDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFUCxNQUFNLFdBQVcsR0FBRztZQUNsQixrQkFBa0IsRUFBRSxFQUFFO1lBRXRCLEtBQUssRUFBRTtnQkFDTCx1REFBdUQ7Z0JBQ3ZELG9CQUFvQjtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLElBQUksRUFBRSxTQUFTO2dCQUNmLDBDQUEwQztnQkFDMUMsdUJBQXVCLEVBQUU7b0JBQ3ZCLDZCQUE2QjtvQkFDN0IsRUFBRTtvQkFDRixZQUFZO2lCQUNiLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNiO1NBQ0YsQ0FBQztRQUVGLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxlQUFlLElBQUksQ0FBQyxDQUFDO1FBRXJELG9FQUFvRTtRQUNwRSxJQUFJLENBQUMsYUFBYSxDQUFDLHlCQUF5QixlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO1FBRXpDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDZCxJQUFJLEVBQUUsa0RBQWtEO1lBQ3hELE9BQU8sRUFBRSxXQUFXO1lBQ3BCLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFRO1NBQ25ELENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDZixJQUFJLEVBQUUsU0FBUztZQUNmLFlBQVksRUFBRSxPQUFPO1lBQ3JCLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFRO1NBQ25ELENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGFBQWEsQ0FBQyxHQUFHLFVBQW9CO1FBQzFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7O09BR0c7SUFDSSxrQkFBa0IsQ0FBQyxLQUEwQjtRQUNsRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFFbkMsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUNoQztRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Ozs7QUE5RVUsOEJBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHaXRIdWIgfSBmcm9tIFwiLi9naXRodWJcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBBdXRvTWVyZ2VPcHRpb25zIHtcbiAgLyoqXG4gICAqIE51bWJlciBvZiBhcHByb3ZlZCBjb2RlIHJldmlld3MuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHJlYWRvbmx5IGFwcHJvdmVkUmV2aWV3cz86IG51bWJlcjtcblxuICAvKipcbiAgICogTGlzdCBvZiBsYWJlbHMgdGhhdCB3aWxsIHByZXZlbnQgYXV0by1tZXJnaW5nLlxuICAgKiBAZGVmYXVsdCBbJ2RvLW5vdC1tZXJnZSddXG4gICAqL1xuICByZWFkb25seSBibG9ja2luZ0xhYmVscz86IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIFNldHMgdXAgbWVyZ2lmeSB0byBtZXJnaW5nIGFwcHJvdmVkIHB1bGwgcmVxdWVzdHMuXG4gKlxuICogSWYgYGJ1aWxkSm9iYCBpcyBzcGVjaWZpZWQsIHRoZSBzcGVjaWZpZWQgR2l0SHViIHdvcmtmbG93IGpvYiBJRCBpcyByZXF1aXJlZFxuICogdG8gc3VjY2VlZCBpbiBvcmRlciBmb3IgdGhlIFBSIHRvIGJlIG1lcmdlZC5cbiAqXG4gKiBgYXBwcm92ZWRSZXZpZXdzYCBzcGVjaWZpZWQgdGhlIG51bWJlciBvZiBjb2RlIHJldmlldyBhcHByb3ZhbHMgcmVxdWlyZWQgZm9yXG4gKiB0aGUgUFIgdG8gYmUgbWVyZ2VkLlxuICovXG5leHBvcnQgY2xhc3MgQXV0b01lcmdlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSByZWFkb25seSBsYXp5Q29uZGl0aW9ucyA9IG5ldyBBcnJheTxJQWRkQ29uZGl0aW9uc0xhdGVyPigpO1xuXG4gIGNvbnN0cnVjdG9yKGdpdGh1YjogR2l0SHViLCBvcHRpb25zOiBBdXRvTWVyZ2VPcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihnaXRodWIucHJvamVjdCk7XG5cbiAgICBjb25zdCBtZXJnaWZ5ID0gZ2l0aHViLm1lcmdpZnk7XG4gICAgaWYgKCFtZXJnaWZ5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhdXRvIG1lcmdpbmcgcmVxdWlyZXMgbWVyZ2lmeSB0byBiZSBlbmFibGVkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGJsb2NraW5nTGFiZWxzID0gb3B0aW9ucy5ibG9ja2luZ0xhYmVscyA/PyBbXCJkby1ub3QtbWVyZ2VcIl07XG4gICAgY29uc3QgYmxvY2tpbmdDb25kaXRpb24gPSBibG9ja2luZ0xhYmVscz8ubGVuZ3RoXG4gICAgICA/IFtgLWxhYmVsfj0oJHtibG9ja2luZ0xhYmVscy5qb2luKFwifFwiKX0pYF1cbiAgICAgIDogW107XG5cbiAgICBjb25zdCBtZXJnZUFjdGlvbiA9IHtcbiAgICAgIGRlbGV0ZV9oZWFkX2JyYW5jaDoge30sXG5cbiAgICAgIHF1ZXVlOiB7XG4gICAgICAgIC8vIHNxdWFzaCBhbGwgY29tbWl0cyBpbnRvIGEgc2luZ2xlIGNvbW1pdCB3aGVuIG1lcmdpbmdcbiAgICAgICAgLy8gbWV0aG9kOiBcInNxdWFzaFwiLFxuICAgICAgICBtZXRob2Q6IFwic3F1YXNoXCIsXG4gICAgICAgIG5hbWU6IFwiZGVmYXVsdFwiLFxuICAgICAgICAvLyB1c2UgUFIgdGl0bGUrYm9keSBhcyB0aGUgY29tbWl0IG1lc3NhZ2VcbiAgICAgICAgY29tbWl0X21lc3NhZ2VfdGVtcGxhdGU6IFtcbiAgICAgICAgICBcInt7IHRpdGxlIH19ICgje3sgbnVtYmVyIH19KVwiLFxuICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgXCJ7eyBib2R5IH19XCIsXG4gICAgICAgIF0uam9pbihcIlxcblwiKSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IGFwcHJvdmVkUmV2aWV3cyA9IG9wdGlvbnMuYXBwcm92ZWRSZXZpZXdzID8/IDE7XG5cbiAgICAvLyBhZGQgaW5pdGlhbCBjb25kaXRpb25zIChhZGRpdGlvbmFsIGNvbmRpdGlvbnMgY2FuIGJlIGFkZGVkIGxhdGVyKVxuICAgIHRoaXMuYWRkQ29uZGl0aW9ucyhgI2FwcHJvdmVkLXJldmlld3MtYnk+PSR7YXBwcm92ZWRSZXZpZXdzfWApO1xuICAgIHRoaXMuYWRkQ29uZGl0aW9ucyguLi5ibG9ja2luZ0NvbmRpdGlvbik7XG5cbiAgICBtZXJnaWZ5LmFkZFJ1bGUoe1xuICAgICAgbmFtZTogXCJBdXRvbWF0aWMgbWVyZ2Ugb24gYXBwcm92YWwgYW5kIHN1Y2Nlc3NmdWwgYnVpbGRcIixcbiAgICAgIGFjdGlvbnM6IG1lcmdlQWN0aW9uLFxuICAgICAgY29uZGl0aW9uczogKCgpID0+IHRoaXMucmVuZGVyQ29uZGl0aW9ucygpKSBhcyBhbnksXG4gICAgfSk7XG5cbiAgICBtZXJnaWZ5LmFkZFF1ZXVlKHtcbiAgICAgIG5hbWU6IFwiZGVmYXVsdFwiLFxuICAgICAgdXBkYXRlTWV0aG9kOiBcIm1lcmdlXCIsXG4gICAgICBjb25kaXRpb25zOiAoKCkgPT4gdGhpcy5yZW5kZXJDb25kaXRpb25zKCkpIGFzIGFueSxcbiAgICB9KTtcblxuICAgIHRoaXMucHJvamVjdC5hZGRQYWNrYWdlSWdub3JlKFwiLy5tZXJnaWZ5LnltbFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGNvbmRpdGlvbnMgdG8gdGhlIGF1dG8gbWVyZ2UgcnVsZS5cbiAgICogQHBhcmFtIGNvbmRpdGlvbnMgVGhlIGNvbmRpdGlvbnMgdG8gYWRkIChtZXJnaWZ5IHN5bnRheClcbiAgICovXG4gIHB1YmxpYyBhZGRDb25kaXRpb25zKC4uLmNvbmRpdGlvbnM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5hZGRDb25kaXRpb25zTGF0ZXIoeyByZW5kZXI6ICgpID0+IGNvbmRpdGlvbnMgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBjb25kaXRpb25zIHRoYXQgd2lsbCBiZSByZW5kZXJlZCBvbmx5IGR1cmluZyBzeW50aGVzaXMuXG4gICAqIEBwYXJhbSBsYXRlciBUaGUgbGF0ZXJcbiAgICovXG4gIHB1YmxpYyBhZGRDb25kaXRpb25zTGF0ZXIobGF0ZXI6IElBZGRDb25kaXRpb25zTGF0ZXIpIHtcbiAgICB0aGlzLmxhenlDb25kaXRpb25zLnB1c2gobGF0ZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJDb25kaXRpb25zKCkge1xuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XG5cbiAgICBmb3IgKGNvbnN0IGxhdGVyIG9mIHRoaXMubGF6eUNvbmRpdGlvbnMpIHtcbiAgICAgIG91dHB1dC5wdXNoKC4uLmxhdGVyLnJlbmRlcigpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFkZENvbmRpdGlvbnNMYXRlciB7XG4gIHJlbmRlcigpOiBzdHJpbmdbXTtcbn1cbiJdfQ==