"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevEnvironmentDockerImage = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Options for specifying the Docker image of the container.
 */
class DevEnvironmentDockerImage {
    /**
     * A publicly available Docker image.
     * @example 'ubuntu:latest'
     * @param image a Docker image
     */
    static fromImage(image) {
        return { image };
    }
    /**
     * The relative path of a Dockerfile that defines the container contents.
     * @example '.gitpod.Docker'
     * @param dockerFile a relative path
     */
    static fromFile(dockerFile) {
        return { dockerFile };
    }
    constructor() { }
}
_a = JSII_RTTI_SYMBOL_1;
DevEnvironmentDockerImage[_a] = { fqn: "projen.DevEnvironmentDockerImage", version: "0.71.82" };
exports.DevEnvironmentDockerImage = DevEnvironmentDockerImage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2LWVudi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXYtZW52LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBNEJBOztHQUVHO0FBQ0gsTUFBYSx5QkFBeUI7SUFDcEM7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBYTtRQUNuQyxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQWtCO1FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBWUQsZ0JBQXVCLENBQUM7Ozs7QUE3QmIsOERBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuL3Rhc2tcIjtcblxuLyoqXG4gKiBCYXNlIG9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIGEgY29udGFpbmVyLWJhc2VkIGRldmVsb3BtZW50IGVudmlyb25tZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIERldkVudmlyb25tZW50T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBIERvY2tlciBpbWFnZSBvciBEb2NrZXJmaWxlIGZvciB0aGUgY29udGFpbmVyLlxuICAgKi9cbiAgcmVhZG9ubHkgZG9ja2VySW1hZ2U/OiBEZXZFbnZpcm9ubWVudERvY2tlckltYWdlO1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiB0YXNrcyB0aGF0IHNob3VsZCBiZSBydW4gd2hlbiB0aGUgY29udGFpbmVyIHN0YXJ0cy5cbiAgICovXG4gIHJlYWRvbmx5IHRhc2tzPzogVGFza1tdO1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBwb3J0cyB0aGF0IHNob3VsZCBiZSBleHBvc2VkIGZyb20gdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIHJlYWRvbmx5IHBvcnRzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGV4dGVuc2lvbiBJRHMgdGhhdCBzcGVjaWZ5IHRoZSBleHRlbnNpb25zIHRoYXQgc2hvdWxkIGJlXG4gICAqIGluc3RhbGxlZCBpbnNpZGUgdGhlIGNvbnRhaW5lciB3aGVuIGl0IGlzIGNyZWF0ZWQuXG4gICAqL1xuICByZWFkb25seSB2c2NvZGVFeHRlbnNpb25zPzogc3RyaW5nW107XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3Igc3BlY2lmeWluZyB0aGUgRG9ja2VyIGltYWdlIG9mIHRoZSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZXZFbnZpcm9ubWVudERvY2tlckltYWdlIHtcbiAgLyoqXG4gICAqIEEgcHVibGljbHkgYXZhaWxhYmxlIERvY2tlciBpbWFnZS5cbiAgICogQGV4YW1wbGUgJ3VidW50dTpsYXRlc3QnXG4gICAqIEBwYXJhbSBpbWFnZSBhIERvY2tlciBpbWFnZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tSW1hZ2UoaW1hZ2U6IHN0cmluZyk6IERldkVudmlyb25tZW50RG9ja2VySW1hZ2Uge1xuICAgIHJldHVybiB7IGltYWdlIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIHJlbGF0aXZlIHBhdGggb2YgYSBEb2NrZXJmaWxlIHRoYXQgZGVmaW5lcyB0aGUgY29udGFpbmVyIGNvbnRlbnRzLlxuICAgKiBAZXhhbXBsZSAnLmdpdHBvZC5Eb2NrZXInXG4gICAqIEBwYXJhbSBkb2NrZXJGaWxlIGEgcmVsYXRpdmUgcGF0aFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tRmlsZShkb2NrZXJGaWxlOiBzdHJpbmcpOiBEZXZFbnZpcm9ubWVudERvY2tlckltYWdlIHtcbiAgICByZXR1cm4geyBkb2NrZXJGaWxlIH07XG4gIH1cblxuICAvKipcbiAgICogQSBwdWJsaWNseSBhdmFpbGFibGUgRG9ja2VyIGltYWdlLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGltYWdlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVsYXRpdmUgcGF0aCBvZiBhIERvY2tlcmZpbGUgdGhhdCBkZWZpbmVzIHRoZSBjb250YWluZXIgY29udGVudHMuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgZG9ja2VyRmlsZT86IHN0cmluZztcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cbn1cblxuLyoqXG4gKiBBYnN0cmFjdCBpbnRlcmZhY2UgZm9yIGNvbnRhaW5lci1iYXNlZCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMsIHN1Y2ggYXNcbiAqIEdpdHBvZCBhbmQgR2l0SHViIENvZGVzcGFjZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSURldkVudmlyb25tZW50IHtcbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSBEb2NrZXIgaW1hZ2Ugb3IgRG9ja2VyZmlsZSBmb3IgdGhlIGNvbnRhaW5lci5cbiAgICpcbiAgICogQHBhcmFtIGltYWdlIFRoZSBEb2NrZXIgaW1hZ2VcbiAgICovXG4gIGFkZERvY2tlckltYWdlKGltYWdlOiBEZXZFbnZpcm9ubWVudERvY2tlckltYWdlKTogdm9pZDtcblxuICAvKipcbiAgICogQWRkcyB0YXNrcyB0byBydW4gd2hlbiB0aGUgY29udGFpbmVyIHN0YXJ0cy5cbiAgICpcbiAgICogQHBhcmFtIHRhc2tzIFRoZSBuZXcgdGFza3NcbiAgICovXG4gIGFkZFRhc2tzKC4uLnRhc2tzOiBUYXNrW10pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBBZGRzIHBvcnRzIHRoYXQgc2hvdWxkIGJlIGV4cG9zZWQgKGZvcndhcmRlZCkgZnJvbSB0aGUgY29udGFpbmVyLlxuICAgKlxuICAgKiBAcGFyYW0gcG9ydHMgVGhlIG5ldyBwb3J0c1xuICAgKi9cbiAgYWRkUG9ydHMoLi4ucG9ydHM6IHN0cmluZ1tdKTogdm9pZDtcblxuICAvKipcbiAgICogQWRkcyBhIGxpc3Qgb2YgVlNDb2RlIGV4dGVuc2lvbnMgdGhhdCBzaG91bGQgYmUgYXV0b21hdGljYWxseSBpbnN0YWxsZWRcbiAgICogaW4gdGhlIGNvbnRhaW5lci5cbiAgICpcbiAgICogQHBhcmFtIGV4dGVuc2lvbnMgVGhlIGV4dGVuc2lvbiBJRHNcbiAgICovXG4gIGFkZFZzY29kZUV4dGVuc2lvbnMoLi4uZXh0ZW5zaW9uczogc3RyaW5nW10pOiB2b2lkO1xufVxuIl19