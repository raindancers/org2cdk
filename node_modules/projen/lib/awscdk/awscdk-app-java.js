"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsCdkJavaApp = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path_1 = require("path");
const awscdk_deps_java_1 = require("./awscdk-deps-java");
const cdk_config_1 = require("./cdk-config");
const cdk_tasks_1 = require("./cdk-tasks");
const __1 = require("..");
const java_1 = require("../java");
/**
 * AWS CDK app in Java.
 *
 * @pjid awscdk-app-java
 */
class AwsCdkJavaApp extends java_1.JavaProject {
    constructor(options) {
        const mainClassComponents = options.mainClass.split(".");
        const mainPackage = mainClassComponents.slice(0, -1);
        const mainClassName = mainClassComponents[mainClassComponents.length - 1];
        super({
            ...options,
            sample: false,
            sampleJavaPackage: mainPackage.join("."),
        });
        this.mainClass = options.mainClass;
        this.mainPackage = mainPackage.join(".");
        this.mainClassName = mainClassName;
        this.cdkDeps = new awscdk_deps_java_1.AwsCdkDepsJava(this, {
            dependencyType: __1.DependencyType.RUNTIME,
            ...options,
        });
        this.cdkTasks = new cdk_tasks_1.CdkTasks(this);
        this.postCompileTask.spawn(this.cdkTasks.synth);
        this.cdkConfig = new cdk_config_1.CdkConfig(this, {
            app: `mvn exec:java --quiet -Dexec.mainClass=${this.mainClass}`,
            featureFlags: this.cdkDeps.cdkMajorVersion < 2,
            ...options,
        });
        if (options.sample ?? true) {
            this.addSample();
        }
    }
    /**
     * Adds an AWS CDK module dependencies
     *
     * @param modules The list of modules to depend on (e.g. "software.amazon.awscdk/aws-lambda", "software.amazon.awscdk/aws-iam", etc)
     * @deprecated In CDK 2.x all modules are available by default. Alpha modules should be added using the standard 'deps'
     */
    addCdkDependency(...modules) {
        for (const m of modules) {
            this.cdkDeps.addV1Dependencies(m);
        }
    }
    addSample() {
        const pkg = this.mainPackage.split(".");
        const javaFile = `${this.mainClassName}.java`;
        new __1.SampleDir(this, (0, path_1.join)("src", "main", "java", ...pkg), {
            files: {
                [javaFile]: [
                    `package ${pkg.join(".")};`,
                    "",
                    this.cdkDeps.cdkMajorVersion == 1
                        ? "import software.amazon.awscdk.core.App;"
                        : "import software.amazon.awscdk.App;",
                    this.cdkDeps.cdkMajorVersion == 1
                        ? "import software.amazon.awscdk.core.Stack;"
                        : "import software.amazon.awscdk.Stack;",
                    "",
                    `public class ${this.mainClassName} {`,
                    "  public static void main(final String[] args) {",
                    "    App app = new App();",
                    `    new Stack(app, "${this.name}");`,
                    "    app.synth();",
                    "  }",
                    "}",
                ].join("\n"),
            },
        });
    }
}
_a = JSII_RTTI_SYMBOL_1;
AwsCdkJavaApp[_a] = { fqn: "projen.awscdk.AwsCdkJavaApp", version: "0.71.82" };
exports.AwsCdkJavaApp = AwsCdkJavaApp;
//# sourceMappingURL=data:application/json;base64,