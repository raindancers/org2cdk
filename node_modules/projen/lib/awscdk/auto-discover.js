"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoDiscover = exports.LambdaExtensionAutoDiscover = exports.EdgeLambdaAutoDiscover = exports.LambdaAutoDiscover = exports.IntegrationTestAutoDiscover = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const integration_test_1 = require("./integration-test");
const internal_1 = require("./internal");
const lambda_extension_1 = require("./lambda-extension");
const lambda_function_1 = require("./lambda-function");
const cdk_1 = require("../cdk");
const component_1 = require("../component");
/**
 * Creates integration tests from entry points discovered in the test tree.
 */
class IntegrationTestAutoDiscover extends cdk_1.IntegrationTestAutoDiscoverBase {
    constructor(project, options) {
        super(project, options);
        for (const entrypoint of this.entrypoints) {
            new integration_test_1.IntegrationTest(this.project, {
                entrypoint,
                cdkDeps: options.cdkDeps,
                tsconfigPath: options.tsconfigPath,
                ...options.integrationTestOptions,
            });
        }
    }
}
_a = JSII_RTTI_SYMBOL_1;
IntegrationTestAutoDiscover[_a] = { fqn: "projen.awscdk.IntegrationTestAutoDiscover", version: "0.71.82" };
exports.IntegrationTestAutoDiscover = IntegrationTestAutoDiscover;
/**
 * Creates lambdas from entry points discovered in the project's source tree.
 */
class LambdaAutoDiscover extends cdk_1.AutoDiscoverBase {
    constructor(project, options) {
        super(project, {
            projectdir: options.srcdir,
            extension: internal_1.TYPESCRIPT_LAMBDA_EXT,
        });
        for (const entrypoint of this.entrypoints) {
            new lambda_function_1.LambdaFunction(this.project, {
                entrypoint,
                cdkDeps: options.cdkDeps,
                ...options.lambdaOptions,
            });
        }
    }
}
_b = JSII_RTTI_SYMBOL_1;
LambdaAutoDiscover[_b] = { fqn: "projen.awscdk.LambdaAutoDiscover", version: "0.71.82" };
exports.LambdaAutoDiscover = LambdaAutoDiscover;
/**
 * Creates edge lambdas from entry points discovered in the project's source tree.
 */
class EdgeLambdaAutoDiscover extends cdk_1.AutoDiscoverBase {
    constructor(project, options) {
        super(project, {
            projectdir: options.srcdir,
            extension: internal_1.TYPESCRIPT_EDGE_LAMBDA_EXT,
        });
        for (const entrypoint of this.entrypoints) {
            new lambda_function_1.LambdaFunction(this.project, {
                entrypoint,
                cdkDeps: options.cdkDeps,
                ...options.lambdaOptions,
                edgeLambda: true,
            });
        }
    }
}
_c = JSII_RTTI_SYMBOL_1;
EdgeLambdaAutoDiscover[_c] = { fqn: "projen.awscdk.EdgeLambdaAutoDiscover", version: "0.71.82" };
exports.EdgeLambdaAutoDiscover = EdgeLambdaAutoDiscover;
/**
 * Creates Lambda Extensions from entrypoints discovered in the project's
 * source tree.
 */
class LambdaExtensionAutoDiscover extends cdk_1.AutoDiscoverBase {
    constructor(project, options) {
        super(project, {
            projectdir: options.srcdir,
            extension: internal_1.TYPESCRIPT_LAMBDA_EXTENSION_EXT,
        });
        for (const entrypoint of this.entrypoints) {
            new lambda_extension_1.LambdaExtension(this.project, {
                entrypoint,
                cdkDeps: options.cdkDeps,
                ...options.lambdaExtensionOptions,
            });
        }
    }
}
_d = JSII_RTTI_SYMBOL_1;
LambdaExtensionAutoDiscover[_d] = { fqn: "projen.awscdk.LambdaExtensionAutoDiscover", version: "0.71.82" };
exports.LambdaExtensionAutoDiscover = LambdaExtensionAutoDiscover;
/**
 * Discovers and creates integration tests and lambdas from code in the
 * project's source and test trees.
 */
class AutoDiscover extends component_1.Component {
    constructor(project, options) {
        super(project);
        if (options.lambdaAutoDiscover ?? true) {
            new LambdaAutoDiscover(this.project, {
                cdkDeps: options.cdkDeps,
                tsconfigPath: options.tsconfigPath,
                srcdir: options.srcdir,
                lambdaOptions: options.lambdaOptions,
            });
        }
        if (options.edgeLambdaAutoDiscover ?? true) {
            new EdgeLambdaAutoDiscover(this.project, {
                cdkDeps: options.cdkDeps,
                tsconfigPath: options.tsconfigPath,
                srcdir: options.srcdir,
                lambdaOptions: options.lambdaOptions,
            });
        }
        if (options.lambdaExtensionAutoDiscover ?? true) {
            new LambdaExtensionAutoDiscover(this.project, {
                cdkDeps: options.cdkDeps,
                tsconfigPath: options.tsconfigPath,
                srcdir: options.srcdir,
                lambdaExtensionOptions: options.lambdaExtensionOptions,
            });
        }
        if (options.integrationTestAutoDiscover ?? true) {
            new IntegrationTestAutoDiscover(this.project, {
                cdkDeps: options.cdkDeps,
                testdir: options.testdir,
                tsconfigPath: options.tsconfigPath,
                integrationTestOptions: options.integrationTestOptions,
            });
        }
    }
}
_e = JSII_RTTI_SYMBOL_1;
AutoDiscover[_e] = { fqn: "projen.awscdk.AutoDiscover", version: "0.71.82" };
exports.AutoDiscover = AutoDiscover;
//# sourceMappingURL=data:application/json;base64,