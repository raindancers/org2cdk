"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevContainer = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("../component");
const json_1 = require("../json");
/**
 * Relative path of devcontainer file to generate
 */
const DEVCONTAINER_FILE = ".devcontainer.json";
/**
 * A development environment running VSCode in a container; used by GitHub
 * codespaces.
 */
class DevContainer extends component_1.Component {
    constructor(project, options = {}) {
        super(project);
        this.postCreateTasks = new Array();
        this.ports = new Array();
        this.vscodeExtensions = new Array();
        this.features = new Array();
        this.dockerImage = options?.dockerImage;
        if (options?.tasks) {
            for (const task of options.tasks) {
                this.addTasks(task);
            }
        }
        if (options?.ports) {
            this.addPorts(...options.ports);
        }
        if (options?.vscodeExtensions) {
            this.addVscodeExtensions(...options.vscodeExtensions);
        }
        if (options.features) {
            this.addFeatures(...options.features);
        }
        this.config = {
            image: () => this.dockerImage?.image,
            build: {
                dockerfile: () => this.dockerImage?.dockerFile,
            },
            postCreateCommand: () => this.renderTasks(),
            forwardPorts: this.ports,
            extensions: this.vscodeExtensions,
            features: () => this.renderFeatures(),
        };
        new json_1.JsonFile(this.project, DEVCONTAINER_FILE, {
            obj: this.config,
            omitEmpty: true,
        });
    }
    addDockerImage(image) {
        if (this.dockerImage) {
            throw new Error("dockerImage cannot be redefined.");
        }
        this.dockerImage = image;
    }
    /**
     * Adds tasks to run when the container starts. Tasks will be run in sequence.
     *
     * @param tasks The new tasks
     */
    addTasks(...tasks) {
        this.postCreateTasks.push(...tasks);
    }
    /**
     * Adds ports that should be exposed (forwarded) from the container.
     *
     * @param ports The new ports
     */
    addPorts(...ports) {
        this.ports.push(...ports);
    }
    /**
     * Adds a list of VSCode extensions that should be automatically installed
     * in the container.
     *
     * @param extensions The extension IDs
     */
    addVscodeExtensions(...extensions) {
        this.vscodeExtensions.push(...extensions);
    }
    /**
     * Adds a list of VSCode features that should be automatically installed
     * in the container.
     *
     * @param features featureName and version(optional default: latest)
     */
    addFeatures(...features) {
        this.features.push(...features);
    }
    renderTasks() {
        if (this.postCreateTasks.length !== 0) {
            return this.postCreateTasks
                .map((task) => `( npx projen ${task.name} )`)
                .join(" && ");
        }
        else {
            return undefined;
        }
    }
    renderFeatures() {
        if (this.features.length === 0) {
            return undefined;
        }
        return this.features.reduce((pv, feature) => {
            pv[feature.name] = {
                version: feature.version ?? "latest",
            };
            return pv;
        }, {});
    }
}
_a = JSII_RTTI_SYMBOL_1;
DevContainer[_a] = { fqn: "projen.vscode.DevContainer", version: "0.71.82" };
exports.DevContainer = DevContainer;
//# sourceMappingURL=data:application/json;base64,