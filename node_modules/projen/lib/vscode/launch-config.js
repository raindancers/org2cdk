"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VsCodeLaunchConfig = exports.InternalConsoleOptions = exports.Console = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("../component");
const json_1 = require("../json");
/**
 * Controls where to launch the debug target
 * Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes
 */
var Console;
(function (Console) {
    Console["INTERNAL_CONSOLE"] = "internalConsole";
    Console["INTEGRATED_TERMINAL"] = "integratedTerminal";
    Console["EXTERNAL_TERMINAL"] = "externalTerminal";
})(Console = exports.Console || (exports.Console = {}));
/**
 * Controls the visibility of the VSCode Debug Console panel during a debugging session
 * Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes
 */
var InternalConsoleOptions;
(function (InternalConsoleOptions) {
    InternalConsoleOptions["NEVER_OPEN"] = "neverOpen";
    InternalConsoleOptions["OPEN_ON_FIRST_SESSION_START"] = "openOnFirstSessionStart";
    InternalConsoleOptions["OPEN_ON_SESSION_START"] = "openOnSessionStart";
})(InternalConsoleOptions = exports.InternalConsoleOptions || (exports.InternalConsoleOptions = {}));
/**
 * VSCode launch configuration file (launch.json), useful for enabling in-editor debugger
 */
class VsCodeLaunchConfig extends component_1.Component {
    static renderLaunchConfig(cfg) {
        if (!cfg.env) {
            return cfg;
        }
        return {
            ...cfg,
            env: Object.fromEntries(Object.entries(cfg.env).map(([key, value]) => [
                key,
                value === false ? null : value,
            ])),
        };
    }
    constructor(vscode) {
        super(vscode.project);
        this.content = {
            version: "0.2.0",
            configurations: [],
        };
        new json_1.JsonFile(vscode.project, ".vscode/launch.json", {
            obj: () => ({
                ...this.content,
                configurations: this.content.configurations.map(VsCodeLaunchConfig.renderLaunchConfig),
            }),
        });
    }
    /**
     * Adds a VsCodeLaunchConfigurationEntry (e.g. a node.js debugger) to `.vscode/launch.json.
     * Each configuration entry has following mandatory fields: type, request and name.
     * See https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes for details.
     * @param cfg VsCodeLaunchConfigurationEntry
     */
    addConfiguration(cfg) {
        this.content.configurations.push(cfg);
    }
}
_a = JSII_RTTI_SYMBOL_1;
VsCodeLaunchConfig[_a] = { fqn: "projen.vscode.VsCodeLaunchConfig", version: "0.71.82" };
exports.VsCodeLaunchConfig = VsCodeLaunchConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF1bmNoLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92c2NvZGUvbGF1bmNoLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDRDQUF5QztBQUN6QyxrQ0FBbUM7QUFFbkM7OztHQUdHO0FBQ0gsSUFBWSxPQUlYO0FBSkQsV0FBWSxPQUFPO0lBQ2pCLCtDQUFvQyxDQUFBO0lBQ3BDLHFEQUEwQyxDQUFBO0lBQzFDLGlEQUFzQyxDQUFBO0FBQ3hDLENBQUMsRUFKVyxPQUFPLEdBQVAsZUFBTyxLQUFQLGVBQU8sUUFJbEI7QUFFRDs7O0dBR0c7QUFDSCxJQUFZLHNCQUlYO0FBSkQsV0FBWSxzQkFBc0I7SUFDaEMsa0RBQXdCLENBQUE7SUFDeEIsaUZBQXVELENBQUE7SUFDdkQsc0VBQTRDLENBQUE7QUFDOUMsQ0FBQyxFQUpXLHNCQUFzQixHQUF0Qiw4QkFBc0IsS0FBdEIsOEJBQXNCLFFBSWpDO0FBMkREOztHQUVHO0FBQ0gsTUFBYSxrQkFBbUIsU0FBUSxxQkFBUztJQUN2QyxNQUFNLENBQUMsa0JBQWtCLENBQUMsR0FBbUM7UUFDbkUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDWixPQUFPLEdBQUcsQ0FBQztTQUNaO1FBRUQsT0FBTztZQUNMLEdBQUcsR0FBRztZQUNOLEdBQUcsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUNyQixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQzVDLEdBQUc7Z0JBQ0gsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLO2FBQy9CLENBQUMsQ0FDSDtTQUNGLENBQUM7SUFDSixDQUFDO0lBSUQsWUFBWSxNQUFjO1FBQ3hCLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdEIsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLGNBQWMsRUFBRSxFQUFFO1NBQ25CLENBQUM7UUFFRixJQUFJLGVBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLHFCQUFxQixFQUFFO1lBQ2xELEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUNWLEdBQUcsSUFBSSxDQUFDLE9BQU87Z0JBQ2YsY0FBYyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FDN0Msa0JBQWtCLENBQUMsa0JBQWtCLENBQ3RDO2FBQ0YsQ0FBQztTQUNILENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLGdCQUFnQixDQUFDLEdBQW1DO1FBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7O0FBN0NVLGdEQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZzQ29kZSB9IGZyb20gXCIuL3ZzY29kZVwiO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgSnNvbkZpbGUgfSBmcm9tIFwiLi4vanNvblwiO1xuXG4vKipcbiAqIENvbnRyb2xzIHdoZXJlIHRvIGxhdW5jaCB0aGUgZGVidWcgdGFyZ2V0XG4gKiBTb3VyY2U6IGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2RvY3MvZWRpdG9yL2RlYnVnZ2luZyNfbGF1bmNoanNvbi1hdHRyaWJ1dGVzXG4gKi9cbmV4cG9ydCBlbnVtIENvbnNvbGUge1xuICBJTlRFUk5BTF9DT05TT0xFID0gXCJpbnRlcm5hbENvbnNvbGVcIixcbiAgSU5URUdSQVRFRF9URVJNSU5BTCA9IFwiaW50ZWdyYXRlZFRlcm1pbmFsXCIsXG4gIEVYVEVSTkFMX1RFUk1JTkFMID0gXCJleHRlcm5hbFRlcm1pbmFsXCIsXG59XG5cbi8qKlxuICogQ29udHJvbHMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIFZTQ29kZSBEZWJ1ZyBDb25zb2xlIHBhbmVsIGR1cmluZyBhIGRlYnVnZ2luZyBzZXNzaW9uXG4gKiBTb3VyY2U6IGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2RvY3MvZWRpdG9yL2RlYnVnZ2luZyNfbGF1bmNoanNvbi1hdHRyaWJ1dGVzXG4gKi9cbmV4cG9ydCBlbnVtIEludGVybmFsQ29uc29sZU9wdGlvbnMge1xuICBORVZFUl9PUEVOID0gXCJuZXZlck9wZW5cIixcbiAgT1BFTl9PTl9GSVJTVF9TRVNTSU9OX1NUQVJUID0gXCJvcGVuT25GaXJzdFNlc3Npb25TdGFydFwiLFxuICBPUEVOX09OX1NFU1NJT05fU1RBUlQgPSBcIm9wZW5PblNlc3Npb25TdGFydFwiLFxufVxuXG4vKipcbiAqIFZTQ29kZSBsYXVuY2ggY29uZmlndXJhdGlvbiBQcmVzZW50YXRpb24gaW50ZXJmYWNlXG4gKiBcInVzaW5nIHRoZSBvcmRlciwgZ3JvdXAsIGFuZCBoaWRkZW4gYXR0cmlidXRlcyBpbiB0aGUgcHJlc2VudGF0aW9uIG9iamVjdCB5b3UgY2FuIHNvcnQsXG4gKiBncm91cCwgYW5kIGhpZGUgY29uZmlndXJhdGlvbnMgYW5kIGNvbXBvdW5kcyBpbiB0aGUgRGVidWcgY29uZmlndXJhdGlvbiBkcm9wZG93blxuICogYW5kIGluIHRoZSBEZWJ1ZyBxdWljayBwaWNrLlwiXG4gKiBTb3VyY2U6IGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2RvY3MvZWRpdG9yL2RlYnVnZ2luZyNfbGF1bmNoanNvbi1hdHRyaWJ1dGVzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJlc2VudGF0aW9uIHtcbiAgcmVhZG9ubHkgaGlkZGVuOiBib29sZWFuO1xuICByZWFkb25seSBncm91cDogc3RyaW5nO1xuICByZWFkb25seSBvcmRlcjogbnVtYmVyO1xufVxuLyoqXG4gKiBWU0NvZGUgbGF1bmNoIGNvbmZpZ3VyYXRpb24gU2VydmVyUmVhZHlBY3Rpb24gaW50ZXJmYWNlXG4gKiBcImlmIHlvdSB3YW50IHRvIG9wZW4gYSBVUkwgaW4gYSB3ZWIgYnJvd3NlciB3aGVuZXZlciB0aGUgcHJvZ3JhbSB1bmRlciBkZWJ1Z2dpbmdcbiAqIG91dHB1dHMgYSBzcGVjaWZpYyBtZXNzYWdlIHRvIHRoZSBkZWJ1ZyBjb25zb2xlIG9yIGludGVncmF0ZWQgdGVybWluYWwuXCJcbiAqIFNvdXJjZTogaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9lZGl0b3IvZGVidWdnaW5nI19sYXVuY2hqc29uLWF0dHJpYnV0ZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXJ2ZXJSZWFkeUFjdGlvbiB7XG4gIHJlYWRvbmx5IGFjdGlvbjogc3RyaW5nO1xuICByZWFkb25seSBwYXR0ZXJuPzogc3RyaW5nO1xuICByZWFkb25seSB1cmlGb3JtYXQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYSAnVnNDb2RlTGF1bmNoQ29uZmlndXJhdGlvbkVudHJ5J1xuICogU291cmNlOiBodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9kb2NzL2VkaXRvci9kZWJ1Z2dpbmcjX2xhdW5jaGpzb24tYXR0cmlidXRlc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFZzQ29kZUxhdW5jaENvbmZpZ3VyYXRpb25FbnRyeSB7XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZztcbiAgcmVhZG9ubHkgcmVxdWVzdDogc3RyaW5nO1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGFyZ3M/OiBzdHJpbmdbXTtcbiAgcmVhZG9ubHkgZGVidWdTZXJ2ZXI/OiBudW1iZXI7XG4gIHJlYWRvbmx5IGludGVybmFsQ29uc29sZU9wdGlvbnM/OiBJbnRlcm5hbENvbnNvbGVPcHRpb25zO1xuICByZWFkb25seSBydW50aW1lQXJncz86IHN0cmluZ1tdO1xuICByZWFkb25seSBwb3N0RGVidWdUYXNrPzogc3RyaW5nO1xuICByZWFkb25seSBwcmVMYXVuY2hUYXNrPzogc3RyaW5nO1xuICByZWFkb25seSBwcmVzZW50YXRpb24/OiBQcmVzZW50YXRpb247XG4gIHJlYWRvbmx5IHByb2dyYW0/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHNlcnZlclJlYWR5QWN0aW9uPzogU2VydmVyUmVhZHlBY3Rpb247XG4gIHJlYWRvbmx5IHNraXBGaWxlcz86IHN0cmluZ1tdO1xuICByZWFkb25seSBvdXRGaWxlcz86IHN0cmluZ1tdO1xuICByZWFkb25seSB1cmw/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHdlYlJvb3Q/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTZXQgdmFsdWUgdG8gYGZhbHNlYCB0byB1bnNldCBhbiBleGlzdGluZyBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICAgKi9cbiAgcmVhZG9ubHkgZW52PzogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgZmFsc2U+O1xuICByZWFkb25seSBlbnZGaWxlPzogc3RyaW5nO1xuICByZWFkb25seSBjd2Q/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHBvcnQ/OiBudW1iZXI7XG4gIHJlYWRvbmx5IHN0b3BPbkVudHJ5PzogYm9vbGVhbjsgLy8gU2NoZW1hIHNheXMgYGJvb2xlYW4gfCBzdHJpbmdgLCBidXQgSSBjYW5ub3QgZmluZCBhIGRvY3VtZW50ZWQgdXNlIGNhc2UgZm9yIHN0cmluZ1xuICByZWFkb25seSBjb25zb2xlPzogQ29uc29sZTtcbiAgcmVhZG9ubHkgZGlzYWJsZU9wdGltaXN0aWNCUHM/OiBib29sZWFuOyAvLyB1bmRvY3VtZW50ZWQgb3B0aW9uIHVzZWQgYnkgdGhlIGplc3QgZXh0ZW5zaW9uLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC92c2NvZGUvaXNzdWVzLzY0MDc5I2lzc3VlY29tbWVudC00NDMzMDQ1NDhcbn1cblxuLyoqXG4gKiBWU0NvZGUgbGF1bmNoIGNvbmZpZ3VyYXRpb24gZmlsZSAobGF1bmNoLmpzb24pLCB1c2VmdWwgZm9yIGVuYWJsaW5nIGluLWVkaXRvciBkZWJ1Z2dlclxuICovXG5leHBvcnQgY2xhc3MgVnNDb2RlTGF1bmNoQ29uZmlnIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVuZGVyTGF1bmNoQ29uZmlnKGNmZzogVnNDb2RlTGF1bmNoQ29uZmlndXJhdGlvbkVudHJ5KSB7XG4gICAgaWYgKCFjZmcuZW52KSB7XG4gICAgICByZXR1cm4gY2ZnO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi5jZmcsXG4gICAgICBlbnY6IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoY2ZnLmVudikubWFwKChba2V5LCB2YWx1ZV0pID0+IFtcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgdmFsdWUgPT09IGZhbHNlID8gbnVsbCA6IHZhbHVlLFxuICAgICAgICBdKVxuICAgICAgKSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSByZWFkb25seSBjb250ZW50OiBWc0NvZGVMYXVuY2hDb25maWd1cmF0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHZzY29kZTogVnNDb2RlKSB7XG4gICAgc3VwZXIodnNjb2RlLnByb2plY3QpO1xuXG4gICAgdGhpcy5jb250ZW50ID0ge1xuICAgICAgdmVyc2lvbjogXCIwLjIuMFwiLFxuICAgICAgY29uZmlndXJhdGlvbnM6IFtdLFxuICAgIH07XG5cbiAgICBuZXcgSnNvbkZpbGUodnNjb2RlLnByb2plY3QsIFwiLnZzY29kZS9sYXVuY2guanNvblwiLCB7XG4gICAgICBvYmo6ICgpID0+ICh7XG4gICAgICAgIC4uLnRoaXMuY29udGVudCxcbiAgICAgICAgY29uZmlndXJhdGlvbnM6IHRoaXMuY29udGVudC5jb25maWd1cmF0aW9ucy5tYXAoXG4gICAgICAgICAgVnNDb2RlTGF1bmNoQ29uZmlnLnJlbmRlckxhdW5jaENvbmZpZ1xuICAgICAgICApLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIFZzQ29kZUxhdW5jaENvbmZpZ3VyYXRpb25FbnRyeSAoZS5nLiBhIG5vZGUuanMgZGVidWdnZXIpIHRvIGAudnNjb2RlL2xhdW5jaC5qc29uLlxuICAgKiBFYWNoIGNvbmZpZ3VyYXRpb24gZW50cnkgaGFzIGZvbGxvd2luZyBtYW5kYXRvcnkgZmllbGRzOiB0eXBlLCByZXF1ZXN0IGFuZCBuYW1lLlxuICAgKiBTZWUgaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9lZGl0b3IvZGVidWdnaW5nI19sYXVuY2hqc29uLWF0dHJpYnV0ZXMgZm9yIGRldGFpbHMuXG4gICAqIEBwYXJhbSBjZmcgVnNDb2RlTGF1bmNoQ29uZmlndXJhdGlvbkVudHJ5XG4gICAqL1xuICBwdWJsaWMgYWRkQ29uZmlndXJhdGlvbihjZmc6IFZzQ29kZUxhdW5jaENvbmZpZ3VyYXRpb25FbnRyeSkge1xuICAgIHRoaXMuY29udGVudC5jb25maWd1cmF0aW9ucy5wdXNoKGNmZyk7XG4gIH1cbn1cblxuaW50ZXJmYWNlIFZzQ29kZUxhdW5jaENvbmZpZ3VyYXRpb24ge1xuICB2ZXJzaW9uOiBzdHJpbmc7XG4gIGNvbmZpZ3VyYXRpb25zOiBWc0NvZGVMYXVuY2hDb25maWd1cmF0aW9uRW50cnlbXTtcbn1cbiJdfQ==