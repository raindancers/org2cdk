"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevel = exports.Logger = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const chalk = require("chalk");
const common_1 = require("./common");
const component_1 = require("./component");
const logging_1 = require("./logging");
const util_1 = require("./util");
/**
 * Project-level logging utilities.
 */
class Logger extends component_1.Component {
    constructor(project, options = {}) {
        super(project);
        // if we are running inside a test, default to no logs
        const defaultLevel = common_1.IS_TEST_RUN ? LogLevel.OFF : LogLevel.INFO;
        this.level = options.level ?? defaultLevel;
        this.usePrefix = options.usePrefix ?? false;
    }
    /**
     * Log a message to stderr with a given logging level. The message will be
     * printed as long as `logger.level` is set to the message's severity or higher.
     *
     * @param level Logging verbosity
     * @param text strings or objects to print
     */
    log(level, ...text) {
        if (level === LogLevel.OFF) {
            throw new Error("Cannot log a message with level LogLevel.OFF");
        }
        let maxLevel = this.level;
        // logging level can be overridden through the --debug CLI option
        if ((0, util_1.isTruthy)(process.env.DEBUG) && maxLevel < LogLevel.DEBUG) {
            maxLevel = LogLevel.DEBUG;
        }
        if (level <= maxLevel) {
            const color = this.colorForLogLevel(level) ??
                ((...values) => values.join(" "));
            const prefix = this.usePrefix ? `[${this.project.name}] ` : "";
            console.error(`${logging_1.ICON} ${prefix}${color(...text)}`);
        }
    }
    /**
     * Log a message to stderr with VERBOSE severity
     * @param text strings or objects to print
     */
    verbose(...text) {
        this.log(LogLevel.VERBOSE, ...text);
    }
    /**
     * Log a message to stderr with DEBUG severity
     * @param text strings or objects to print
     */
    debug(...text) {
        this.log(LogLevel.DEBUG, ...text);
    }
    /**
     * Log a message to stderr with INFO severity
     * @param text strings or objects to print
     */
    info(...text) {
        this.log(LogLevel.INFO, ...text);
    }
    /**
     * Log a message to stderr with WARN severity
     * @param text strings or objects to print
     */
    warn(...text) {
        this.log(LogLevel.WARN, ...text);
    }
    /**
     * Log a message to stderr with ERROR severity
     * @param text strings or objects to print
     */
    error(...text) {
        this.log(LogLevel.ERROR, ...text);
    }
    colorForLogLevel(level) {
        switch (level) {
            case LogLevel.ERROR:
                return chalk.red;
            case LogLevel.WARN:
                return chalk.yellow;
            case LogLevel.INFO:
                return chalk.cyan;
            case LogLevel.DEBUG:
                return chalk.gray;
            case LogLevel.VERBOSE:
                return chalk.white;
            default:
                return chalk.white;
        }
    }
}
_a = JSII_RTTI_SYMBOL_1;
Logger[_a] = { fqn: "projen.Logger", version: "0.71.82" };
exports.Logger = Logger;
/**
 * Logging verbosity.
 */
var LogLevel;
(function (LogLevel) {
    LogLevel["OFF"] = "00.off";
    LogLevel["ERROR"] = "10.error";
    LogLevel["WARN"] = "20.warn";
    LogLevel["INFO"] = "30.info";
    LogLevel["DEBUG"] = "40.debug";
    LogLevel["VERBOSE"] = "50.verbose";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
//# sourceMappingURL=data:application/json;base64,