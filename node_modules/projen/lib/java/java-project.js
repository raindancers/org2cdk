"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavaProject = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const junit_1 = require("./junit");
const maven_compile_1 = require("./maven-compile");
const maven_packaging_1 = require("./maven-packaging");
const maven_sample_1 = require("./maven-sample");
const pom_1 = require("./pom");
const projenrc_1 = require("./projenrc");
const github_1 = require("../github");
const util_1 = require("../util");
/**
 * Java project.
 *
 * @pjid java
 */
class JavaProject extends github_1.GitHubProject {
    constructor(options) {
        super(options);
        this.distdir = options.distdir ?? "dist/java";
        this.pom = new pom_1.Pom(this, options);
        const rcFileTypeOptions = [options.projenrcJava, options.projenrcJson];
        if ((0, util_1.multipleSelected)(rcFileTypeOptions)) {
            throw new Error("Only one of projenrcJava and projenrcJson can be selected.");
        }
        // default to projenrc.java if no other projenrc type was elected
        if (!this.parent &&
            (options.projenrcJava ?? !(0, util_1.anySelected)(rcFileTypeOptions))) {
            this.projenrc = new projenrc_1.Projenrc(this, this.pom, options.projenrcJavaOptions);
        }
        const sampleJavaPackage = options.sampleJavaPackage ?? "org.acme";
        if (options.junit ?? true) {
            this.junit = new junit_1.Junit(this, {
                pom: this.pom,
                sampleJavaPackage,
                ...options.junitOptions,
            });
        }
        if (options.sample ?? true) {
            new maven_sample_1.MavenSample(this, { package: sampleJavaPackage });
        }
        // platform independent build
        this.pom.addProperty("project.build.sourceEncoding", "UTF-8");
        this.gitignore.exclude(".classpath");
        this.gitignore.exclude(".project");
        this.gitignore.exclude(".settings");
        this.compile = new maven_compile_1.MavenCompile(this, this.pom, options.compileOptions);
        this.packaging = new maven_packaging_1.MavenPackaging(this, this.pom, options.packagingOptions);
        this.addPlugin("org.apache.maven.plugins/maven-enforcer-plugin@3.0.0-M3", {
            executions: [{ id: "enforce-maven", goals: ["enforce"] }],
            configuration: {
                rules: [{ requireMavenVersion: [{ version: "3.6" }] }],
            },
        });
        for (const dep of options.deps ?? []) {
            this.addDependency(dep);
        }
        for (const dep of options.testDeps ?? []) {
            this.addTestDependency(dep);
        }
    }
    /**
     * Adds a runtime dependency.
     *
     * @param spec Format `<groupId>/<artifactId>@<semver>`
     */
    addDependency(spec) {
        return this.pom.addDependency(spec);
    }
    /**
     * Adds a test dependency.
     *
     * @param spec Format `<groupId>/<artifactId>@<semver>`
     */
    addTestDependency(spec) {
        return this.pom.addTestDependency(spec);
    }
    /**
     * Adds a build plugin to the pom.
     *
     * The plug in is also added as a BUILD dep to the project.
     *
     * @param spec dependency spec (`group/artifact@version`)
     * @param options plugin options
     */
    addPlugin(spec, options = {}) {
        return this.pom.addPlugin(spec, options);
    }
}
_a = JSII_RTTI_SYMBOL_1;
JavaProject[_a] = { fqn: "projen.java.JavaProject", version: "0.71.82" };
exports.JavaProject = JavaProject;
//# sourceMappingURL=data:application/json;base64,