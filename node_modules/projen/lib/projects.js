"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Projects = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("path");
const vm = require("vm");
const inventory_1 = require("./inventory");
const render_options_1 = require("./javascript/render-options");
const option_hints_1 = require("./option-hints");
/**
 * Programmatic API for projen.
 */
class Projects {
    /**
     * Creates a new project with defaults.
     *
     * This function creates the project type in-process (with in VM) and calls
     * `.synth()` on it (if `options.synth` is not `false`).
     *
     * At the moment, it also generates a `.projenrc.js` file with the same code
     * that was just executed. In the future, this will also be done by the project
     * type, so we can easily support multiple languages of projenrc.
     *
     * An environment variable (PROJEN_CREATE_PROJECT=true) is set within the VM
     * so that custom project types can detect whether the current synthesis is the
     * result of a new project creation (and take additional steps accordingly)
     */
    static createProject(options) {
        createProject(options);
    }
    constructor() { }
}
_a = JSII_RTTI_SYMBOL_1;
Projects[_a] = { fqn: "projen.Projects", version: "0.71.82" };
exports.Projects = Projects;
function resolveModulePath(moduleName) {
    // Default project resolution location
    if (moduleName === "projen") {
        return "./index";
    }
    // External projects need to load the module from the modules directory
    try {
        return path.dirname(require.resolve(path.join(moduleName, "package.json"), {
            paths: [process.cwd()],
        }));
    }
    catch (err) {
        throw new Error(`External project module '${moduleName}' could not be resolved.`);
    }
}
function createProject(opts) {
    const projectType = (0, inventory_1.resolveProjectType)(opts.projectFqn);
    const mod = resolveModulePath(projectType.moduleName);
    // "dir" is exposed as a top-level option to require users to specify a value for it
    opts.projectOptions.outdir = opts.dir;
    // Generated a random name space for imports used by options
    // This is so we can keep the top-level namespace as clean as possible
    const optionsImports = "_options" + Math.random().toString(36).slice(2);
    // pass the FQN of the project type to the project initializer so it can
    // generate the projenrc file.
    const { renderedOptions, imports } = (0, render_options_1.renderJavaScriptOptions)({
        bootstrap: true,
        comments: opts.optionHints ?? option_hints_1.InitProjectOptionHints.FEATURED,
        type: projectType,
        args: opts.projectOptions,
        omitFromBootstrap: ["outdir"],
        prefixImports: optionsImports,
    });
    const initProjectCode = new Array();
    // generate a random variable name because jest tests appear to share
    // VM contexts, causing
    //
    // > SyntaxError: Identifier 'project' has already been declared
    //
    // errors if this isn't unique
    const varName = "project" + Math.random().toString(36).slice(2);
    initProjectCode.push(`const ${varName} = new ${projectType.typename}(${renderedOptions});`);
    if (opts.synth ?? true) {
        initProjectCode.push(`${varName}.synth();`);
    }
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const mainModule = require(mod);
    const ctx = vm.createContext({
        ...mainModule,
        [optionsImports]: {
            ...imports.modules.reduce((optionsContext, currentModule) => ({
                ...optionsContext,
                // eslint-disable-next-line @typescript-eslint/no-require-imports
                [currentModule]: require(resolveModulePath(currentModule)),
            }), {}),
        },
    });
    const postSynth = opts.post ?? true;
    process.env.PROJEN_DISABLE_POST = (!postSynth).toString();
    process.env.PROJEN_CREATE_PROJECT = "true";
    vm.runInContext(initProjectCode.join("\n"), ctx);
}
//# sourceMappingURL=data:application/json;base64,