"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IgnoreFile = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const file_1 = require("./file");
class IgnoreFile extends file_1.FileBase {
    /**
     *
     * @param project The project to tie this file to.
     * @param filePath - the relative path in the project to put the file
     * @param minify - whether comments/blank lines should be filtered
     */
    constructor(project, filePath, options) {
        super(project, filePath, { editGitignore: filePath !== ".gitignore" });
        this._patterns = new Array();
        this.filterCommentLines = options?.filterCommentLines ?? true;
        this.filterEmptyLines = options?.filterEmptyLines ?? true;
    }
    /**
     * Add ignore patterns. Files that match this pattern will be ignored. If the
     * pattern starts with a negation mark `!`, files that match will _not_ be
     * ignored.
     *
     * Comment lines (start with `#`) and blank lines ("") are filtered by default
     * but can be included using options specified when instantiating the component.
     *
     * @param patterns Ignore patterns.
     */
    addPatterns(...patterns) {
        for (const pattern of patterns) {
            const isComment = pattern.startsWith("#");
            const isEmptyLine = Boolean(pattern.trim().length === 0);
            if (isComment && this.filterCommentLines) {
                continue;
            }
            if (isEmptyLine && this.filterEmptyLines) {
                continue;
            }
            if (!isComment && !isEmptyLine) {
                this.normalizePatterns(pattern);
            }
            this._patterns.push(pattern);
        }
    }
    normalizePatterns(pattern) {
        const opposite = pattern.startsWith("!") ? pattern.slice(1) : "!" + pattern;
        remove(this._patterns, pattern); // prevent duplicates
        remove(this._patterns, opposite);
        if (pattern.endsWith("/")) {
            const prefix = opposite;
            for (const p of [...this._patterns]) {
                if (p.startsWith(prefix)) {
                    remove(this._patterns, p);
                }
            }
        }
    }
    /**
     * Removes patterns previously added from the ignore file.
     *
     * If `addPattern()` is called after this, the pattern will be added again.
     *
     * @param patterns patters to remove.
     */
    removePatterns(...patterns) {
        for (const p of patterns) {
            remove(this._patterns, p);
        }
    }
    /**
     * Ignore the files that match these patterns.
     * @param patterns The patterns to match.
     */
    exclude(...patterns) {
        return this.addPatterns(...patterns);
    }
    /**
     * Always include the specified file patterns.
     * @param patterns Patterns to include in git commits.
     */
    include(...patterns) {
        for (let pattern of patterns) {
            if (!pattern.startsWith("!")) {
                pattern = "!" + pattern;
            }
            this.addPatterns(pattern);
        }
    }
    synthesizeContent(resolver) {
        const lines = [
            ...(this.marker ? [`# ${this.marker}`] : []),
            ...this._patterns,
        ];
        return `${resolver.resolve(lines).join("\n")}\n`;
    }
}
_a = JSII_RTTI_SYMBOL_1;
IgnoreFile[_a] = { fqn: "projen.IgnoreFile", version: "0.71.82" };
exports.IgnoreFile = IgnoreFile;
// O(n) hooray!
function remove(arr, value) {
    const idx = arr.indexOf(value);
    if (idx >= 0) {
        arr.splice(idx, 1);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdub3JlLWZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaWdub3JlLWZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxpQ0FBNkM7QUFtQjdDLE1BQWEsVUFBVyxTQUFRLGVBQVE7SUFLdEM7Ozs7O09BS0c7SUFDSCxZQUFZLE9BQWdCLEVBQUUsUUFBZ0IsRUFBRSxPQUEyQjtRQUN6RSxLQUFLLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLGFBQWEsRUFBRSxRQUFRLEtBQUssWUFBWSxFQUFFLENBQUMsQ0FBQztRQVh4RCxjQUFTLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztRQVkvQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxFQUFFLGtCQUFrQixJQUFJLElBQUksQ0FBQztRQUM5RCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxFQUFFLGdCQUFnQixJQUFJLElBQUksQ0FBQztJQUM1RCxDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0ksV0FBVyxDQUFDLEdBQUcsUUFBa0I7UUFDdEMsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDOUIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxQyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN6RCxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7Z0JBQ3hDLFNBQVM7YUFDVjtZQUNELElBQUksV0FBVyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDeEMsU0FBUzthQUNWO1lBQ0QsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBRU8saUJBQWlCLENBQUMsT0FBZTtRQUN2QyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO1FBQzVFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMscUJBQXFCO1FBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRWpDLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN6QixNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUM7WUFDeEIsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNuQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUMzQjthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksY0FBYyxDQUFDLEdBQUcsUUFBa0I7UUFDekMsS0FBSyxNQUFNLENBQUMsSUFBSSxRQUFRLEVBQUU7WUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksT0FBTyxDQUFDLEdBQUcsUUFBa0I7UUFDbEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE9BQU8sQ0FBQyxHQUFHLFFBQWtCO1FBQ2xDLEtBQUssSUFBSSxPQUFPLElBQUksUUFBUSxFQUFFO1lBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUM1QixPQUFPLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQzthQUN6QjtZQUVELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRVMsaUJBQWlCLENBQUMsUUFBbUI7UUFDN0MsTUFBTSxLQUFLLEdBQUc7WUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDNUMsR0FBRyxJQUFJLENBQUMsU0FBUztTQUNsQixDQUFDO1FBRUYsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkQsQ0FBQzs7OztBQXJHVSxnQ0FBVTtBQXdHdkIsZUFBZTtBQUNmLFNBQVMsTUFBTSxDQUFJLEdBQVEsRUFBRSxLQUFVO0lBQ3JDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFO1FBQ1osR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZUJhc2UsIElSZXNvbHZlciB9IGZyb20gXCIuL2ZpbGVcIjtcbmltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi9wcm9qZWN0XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWdub3JlRmlsZU9wdGlvbnMge1xuICAvKipcbiAgICogRmlsdGVyIG91dCBjb21tZW50IGxpbmVzP1xuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICByZWFkb25seSBmaWx0ZXJDb21tZW50TGluZXM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBGaWx0ZXIgb3V0IGJsYW5rL2VtcHR5IGxpbmVzP1xuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICByZWFkb25seSBmaWx0ZXJFbXB0eUxpbmVzPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIElnbm9yZUZpbGUgZXh0ZW5kcyBGaWxlQmFzZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3BhdHRlcm5zID0gbmV3IEFycmF5PHN0cmluZz4oKTtcbiAgcHVibGljIHJlYWRvbmx5IGZpbHRlckNvbW1lbnRMaW5lczogYm9vbGVhbjtcbiAgcHVibGljIHJlYWRvbmx5IGZpbHRlckVtcHR5TGluZXM6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBwcm9qZWN0IFRoZSBwcm9qZWN0IHRvIHRpZSB0aGlzIGZpbGUgdG8uXG4gICAqIEBwYXJhbSBmaWxlUGF0aCAtIHRoZSByZWxhdGl2ZSBwYXRoIGluIHRoZSBwcm9qZWN0IHRvIHB1dCB0aGUgZmlsZVxuICAgKiBAcGFyYW0gbWluaWZ5IC0gd2hldGhlciBjb21tZW50cy9ibGFuayBsaW5lcyBzaG91bGQgYmUgZmlsdGVyZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb2plY3Q6IFByb2plY3QsIGZpbGVQYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBJZ25vcmVGaWxlT3B0aW9ucykge1xuICAgIHN1cGVyKHByb2plY3QsIGZpbGVQYXRoLCB7IGVkaXRHaXRpZ25vcmU6IGZpbGVQYXRoICE9PSBcIi5naXRpZ25vcmVcIiB9KTtcbiAgICB0aGlzLmZpbHRlckNvbW1lbnRMaW5lcyA9IG9wdGlvbnM/LmZpbHRlckNvbW1lbnRMaW5lcyA/PyB0cnVlO1xuICAgIHRoaXMuZmlsdGVyRW1wdHlMaW5lcyA9IG9wdGlvbnM/LmZpbHRlckVtcHR5TGluZXMgPz8gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgaWdub3JlIHBhdHRlcm5zLiBGaWxlcyB0aGF0IG1hdGNoIHRoaXMgcGF0dGVybiB3aWxsIGJlIGlnbm9yZWQuIElmIHRoZVxuICAgKiBwYXR0ZXJuIHN0YXJ0cyB3aXRoIGEgbmVnYXRpb24gbWFyayBgIWAsIGZpbGVzIHRoYXQgbWF0Y2ggd2lsbCBfbm90XyBiZVxuICAgKiBpZ25vcmVkLlxuICAgKlxuICAgKiBDb21tZW50IGxpbmVzIChzdGFydCB3aXRoIGAjYCkgYW5kIGJsYW5rIGxpbmVzIChcIlwiKSBhcmUgZmlsdGVyZWQgYnkgZGVmYXVsdFxuICAgKiBidXQgY2FuIGJlIGluY2x1ZGVkIHVzaW5nIG9wdGlvbnMgc3BlY2lmaWVkIHdoZW4gaW5zdGFudGlhdGluZyB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0gcGF0dGVybnMgSWdub3JlIHBhdHRlcm5zLlxuICAgKi9cbiAgcHVibGljIGFkZFBhdHRlcm5zKC4uLnBhdHRlcm5zOiBzdHJpbmdbXSkge1xuICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBwYXR0ZXJucykge1xuICAgICAgY29uc3QgaXNDb21tZW50ID0gcGF0dGVybi5zdGFydHNXaXRoKFwiI1wiKTtcbiAgICAgIGNvbnN0IGlzRW1wdHlMaW5lID0gQm9vbGVhbihwYXR0ZXJuLnRyaW0oKS5sZW5ndGggPT09IDApO1xuICAgICAgaWYgKGlzQ29tbWVudCAmJiB0aGlzLmZpbHRlckNvbW1lbnRMaW5lcykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0VtcHR5TGluZSAmJiB0aGlzLmZpbHRlckVtcHR5TGluZXMpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoIWlzQ29tbWVudCAmJiAhaXNFbXB0eUxpbmUpIHtcbiAgICAgICAgdGhpcy5ub3JtYWxpemVQYXR0ZXJucyhwYXR0ZXJuKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3BhdHRlcm5zLnB1c2gocGF0dGVybik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBub3JtYWxpemVQYXR0ZXJucyhwYXR0ZXJuOiBzdHJpbmcpIHtcbiAgICBjb25zdCBvcHBvc2l0ZSA9IHBhdHRlcm4uc3RhcnRzV2l0aChcIiFcIikgPyBwYXR0ZXJuLnNsaWNlKDEpIDogXCIhXCIgKyBwYXR0ZXJuO1xuICAgIHJlbW92ZSh0aGlzLl9wYXR0ZXJucywgcGF0dGVybik7IC8vIHByZXZlbnQgZHVwbGljYXRlc1xuICAgIHJlbW92ZSh0aGlzLl9wYXR0ZXJucywgb3Bwb3NpdGUpO1xuXG4gICAgaWYgKHBhdHRlcm4uZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgICBjb25zdCBwcmVmaXggPSBvcHBvc2l0ZTtcbiAgICAgIGZvciAoY29uc3QgcCBvZiBbLi4udGhpcy5fcGF0dGVybnNdKSB7XG4gICAgICAgIGlmIChwLnN0YXJ0c1dpdGgocHJlZml4KSkge1xuICAgICAgICAgIHJlbW92ZSh0aGlzLl9wYXR0ZXJucywgcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBwYXR0ZXJucyBwcmV2aW91c2x5IGFkZGVkIGZyb20gdGhlIGlnbm9yZSBmaWxlLlxuICAgKlxuICAgKiBJZiBgYWRkUGF0dGVybigpYCBpcyBjYWxsZWQgYWZ0ZXIgdGhpcywgdGhlIHBhdHRlcm4gd2lsbCBiZSBhZGRlZCBhZ2Fpbi5cbiAgICpcbiAgICogQHBhcmFtIHBhdHRlcm5zIHBhdHRlcnMgdG8gcmVtb3ZlLlxuICAgKi9cbiAgcHVibGljIHJlbW92ZVBhdHRlcm5zKC4uLnBhdHRlcm5zOiBzdHJpbmdbXSkge1xuICAgIGZvciAoY29uc3QgcCBvZiBwYXR0ZXJucykge1xuICAgICAgcmVtb3ZlKHRoaXMuX3BhdHRlcm5zLCBwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSWdub3JlIHRoZSBmaWxlcyB0aGF0IG1hdGNoIHRoZXNlIHBhdHRlcm5zLlxuICAgKiBAcGFyYW0gcGF0dGVybnMgVGhlIHBhdHRlcm5zIHRvIG1hdGNoLlxuICAgKi9cbiAgcHVibGljIGV4Y2x1ZGUoLi4ucGF0dGVybnM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkUGF0dGVybnMoLi4ucGF0dGVybnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBpbmNsdWRlIHRoZSBzcGVjaWZpZWQgZmlsZSBwYXR0ZXJucy5cbiAgICogQHBhcmFtIHBhdHRlcm5zIFBhdHRlcm5zIHRvIGluY2x1ZGUgaW4gZ2l0IGNvbW1pdHMuXG4gICAqL1xuICBwdWJsaWMgaW5jbHVkZSguLi5wYXR0ZXJuczogc3RyaW5nW10pIHtcbiAgICBmb3IgKGxldCBwYXR0ZXJuIG9mIHBhdHRlcm5zKSB7XG4gICAgICBpZiAoIXBhdHRlcm4uc3RhcnRzV2l0aChcIiFcIikpIHtcbiAgICAgICAgcGF0dGVybiA9IFwiIVwiICsgcGF0dGVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hZGRQYXR0ZXJucyhwYXR0ZXJuKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUNvbnRlbnQocmVzb2x2ZXI6IElSZXNvbHZlcik6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgbGluZXMgPSBbXG4gICAgICAuLi4odGhpcy5tYXJrZXIgPyBbYCMgJHt0aGlzLm1hcmtlcn1gXSA6IFtdKSxcbiAgICAgIC4uLnRoaXMuX3BhdHRlcm5zLFxuICAgIF07XG5cbiAgICByZXR1cm4gYCR7cmVzb2x2ZXIucmVzb2x2ZShsaW5lcykuam9pbihcIlxcblwiKX1cXG5gO1xuICB9XG59XG5cbi8vIE8obikgaG9vcmF5IVxuZnVuY3Rpb24gcmVtb3ZlPFQ+KGFycjogVFtdLCB2YWx1ZTogYW55KSB7XG4gIGNvbnN0IGlkeCA9IGFyci5pbmRleE9mKHZhbHVlKTtcbiAgaWYgKGlkeCA+PSAwKSB7XG4gICAgYXJyLnNwbGljZShpZHgsIDEpO1xuICB9XG59XG4iXX0=