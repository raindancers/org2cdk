"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const yargs = require("yargs");
const new_1 = require("./cmds/new");
const synth_1 = require("./synth");
const tasks_1 = require("./tasks");
const common_1 = require("../common");
const logging = require("../logging");
const task_runtime_1 = require("../task-runtime");
const util_1 = require("../util");
const DEFAULT_RC = (0, path_1.resolve)(common_1.PROJEN_RC);
async function main() {
    const ya = yargs;
    ya.command(new_1.default);
    const pathToProjenDir = (0, util_1.findUp)(common_1.PROJEN_DIR, process.cwd());
    const runtime = new task_runtime_1.TaskRuntime(pathToProjenDir ?? ".");
    (0, tasks_1.discoverTaskCommands)(runtime, ya);
    ya.recommendCommands();
    ya.strictCommands();
    ya.showHelpOnFail(false);
    ya.wrap(yargs.terminalWidth());
    ya.option("post", {
        type: "boolean",
        default: true,
        desc: "Run post-synthesis steps such as installing dependencies. Use --no-post to skip",
    });
    ya.option("watch", {
        type: "boolean",
        default: false,
        desc: "Keep running and resynthesize when projenrc changes",
        alias: "w",
    });
    ya.options("debug", { type: "boolean", default: false, desc: "Debug logs" });
    ya.options("rc", {
        deprecated: true,
        desc: "path to .projenrc.js file",
        default: DEFAULT_RC,
        type: "string",
    });
    ya.completion();
    ya.help();
    // do not use the default yargs '--version' implementation since it is
    // global by default (it appears on all subcommands)
    ya.version(false);
    ya.option("version", {
        type: "boolean",
        description: "Show version number",
        global: false,
    });
    const args = await ya.argv;
    if (args.debug) {
        process.env.DEBUG = "true";
    }
    const nodeVersion = (0, util_1.getNodeMajorVersion)();
    if (nodeVersion && nodeVersion < 16) {
        logging.warn(`WARNING: You are using Node v${nodeVersion}, which reaches end of life on April 30, 2023. Support for EOL Node releases may be dropped by projen in the future. Please consider upgrading to Node >= 16 as soon as possible.`);
    }
    // no command means synthesize
    if (args._.length === 0) {
        if (args.version) {
            console.log(common_1.PROJEN_VERSION);
            process.exit(0);
        }
        await (0, synth_1.synth)(runtime, {
            post: args.post,
            watch: args.watch,
            rcfile: args.rc,
        });
    }
}
main().catch((e) => {
    console.error(e.stack);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xpL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQixvQ0FBb0M7QUFDcEMsbUNBQWdDO0FBQ2hDLG1DQUErQztBQUMvQyxzQ0FBa0U7QUFDbEUsc0NBQXNDO0FBQ3RDLGtEQUE4QztBQUM5QyxrQ0FBc0Q7QUFFdEQsTUFBTSxVQUFVLEdBQUcsSUFBQSxjQUFPLEVBQUMsa0JBQVMsQ0FBQyxDQUFDO0FBRXRDLEtBQUssVUFBVSxJQUFJO0lBQ2pCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQztJQUNqQixFQUFFLENBQUMsT0FBTyxDQUFDLGFBQVUsQ0FBQyxDQUFDO0lBRXZCLE1BQU0sZUFBZSxHQUFHLElBQUEsYUFBTSxFQUFDLG1CQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDMUQsTUFBTSxPQUFPLEdBQUcsSUFBSSwwQkFBVyxDQUFDLGVBQWUsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUN4RCxJQUFBLDRCQUFvQixFQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVsQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUN2QixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDcEIsRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ2hCLElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFLElBQUk7UUFDYixJQUFJLEVBQUUsaUZBQWlGO0tBQ3hGLENBQUMsQ0FBQztJQUNILEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQ2pCLElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUscURBQXFEO1FBQzNELEtBQUssRUFBRSxHQUFHO0tBQ1gsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDN0UsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7UUFDZixVQUFVLEVBQUUsSUFBSTtRQUNoQixJQUFJLEVBQUUsMkJBQTJCO1FBQ2pDLE9BQU8sRUFBRSxVQUFVO1FBQ25CLElBQUksRUFBRSxRQUFRO0tBQ2YsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2hCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVWLHNFQUFzRTtJQUN0RSxvREFBb0Q7SUFDcEQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUNuQixJQUFJLEVBQUUsU0FBUztRQUNmLFdBQVcsRUFBRSxxQkFBcUI7UUFDbEMsTUFBTSxFQUFFLEtBQUs7S0FDZCxDQUFDLENBQUM7SUFFSCxNQUFNLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFFM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO0tBQzVCO0lBRUQsTUFBTSxXQUFXLEdBQUcsSUFBQSwwQkFBbUIsR0FBRSxDQUFDO0lBQzFDLElBQUksV0FBVyxJQUFJLFdBQVcsR0FBRyxFQUFFLEVBQUU7UUFDbkMsT0FBTyxDQUFDLElBQUksQ0FDVixnQ0FBZ0MsV0FBVyxtTEFBbUwsQ0FDL04sQ0FBQztLQUNIO0lBRUQsOEJBQThCO0lBQzlCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3ZCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUFjLENBQUMsQ0FBQztZQUM1QixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBQ0QsTUFBTSxJQUFBLGFBQUssRUFBQyxPQUFPLEVBQUU7WUFDbkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFlO1lBQzFCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBZ0I7WUFDNUIsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFZO1NBQzFCLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQUVELElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCAqIGFzIHlhcmdzIGZyb20gXCJ5YXJnc1wiO1xuaW1wb3J0IG5ld0NvbW1hbmQgZnJvbSBcIi4vY21kcy9uZXdcIjtcbmltcG9ydCB7IHN5bnRoIH0gZnJvbSBcIi4vc3ludGhcIjtcbmltcG9ydCB7IGRpc2NvdmVyVGFza0NvbW1hbmRzIH0gZnJvbSBcIi4vdGFza3NcIjtcbmltcG9ydCB7IFBST0pFTl9ESVIsIFBST0pFTl9SQywgUFJPSkVOX1ZFUlNJT04gfSBmcm9tIFwiLi4vY29tbW9uXCI7XG5pbXBvcnQgKiBhcyBsb2dnaW5nIGZyb20gXCIuLi9sb2dnaW5nXCI7XG5pbXBvcnQgeyBUYXNrUnVudGltZSB9IGZyb20gXCIuLi90YXNrLXJ1bnRpbWVcIjtcbmltcG9ydCB7IGZpbmRVcCwgZ2V0Tm9kZU1ham9yVmVyc2lvbiB9IGZyb20gXCIuLi91dGlsXCI7XG5cbmNvbnN0IERFRkFVTFRfUkMgPSByZXNvbHZlKFBST0pFTl9SQyk7XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG4gIGNvbnN0IHlhID0geWFyZ3M7XG4gIHlhLmNvbW1hbmQobmV3Q29tbWFuZCk7XG5cbiAgY29uc3QgcGF0aFRvUHJvamVuRGlyID0gZmluZFVwKFBST0pFTl9ESVIsIHByb2Nlc3MuY3dkKCkpO1xuICBjb25zdCBydW50aW1lID0gbmV3IFRhc2tSdW50aW1lKHBhdGhUb1Byb2plbkRpciA/PyBcIi5cIik7XG4gIGRpc2NvdmVyVGFza0NvbW1hbmRzKHJ1bnRpbWUsIHlhKTtcblxuICB5YS5yZWNvbW1lbmRDb21tYW5kcygpO1xuICB5YS5zdHJpY3RDb21tYW5kcygpO1xuICB5YS5zaG93SGVscE9uRmFpbChmYWxzZSk7XG4gIHlhLndyYXAoeWFyZ3MudGVybWluYWxXaWR0aCgpKTtcbiAgeWEub3B0aW9uKFwicG9zdFwiLCB7XG4gICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICBkZXNjOiBcIlJ1biBwb3N0LXN5bnRoZXNpcyBzdGVwcyBzdWNoIGFzIGluc3RhbGxpbmcgZGVwZW5kZW5jaWVzLiBVc2UgLS1uby1wb3N0IHRvIHNraXBcIixcbiAgfSk7XG4gIHlhLm9wdGlvbihcIndhdGNoXCIsIHtcbiAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICBkZXNjOiBcIktlZXAgcnVubmluZyBhbmQgcmVzeW50aGVzaXplIHdoZW4gcHJvamVucmMgY2hhbmdlc1wiLFxuICAgIGFsaWFzOiBcIndcIixcbiAgfSk7XG4gIHlhLm9wdGlvbnMoXCJkZWJ1Z1wiLCB7IHR5cGU6IFwiYm9vbGVhblwiLCBkZWZhdWx0OiBmYWxzZSwgZGVzYzogXCJEZWJ1ZyBsb2dzXCIgfSk7XG4gIHlhLm9wdGlvbnMoXCJyY1wiLCB7XG4gICAgZGVwcmVjYXRlZDogdHJ1ZSxcbiAgICBkZXNjOiBcInBhdGggdG8gLnByb2plbnJjLmpzIGZpbGVcIixcbiAgICBkZWZhdWx0OiBERUZBVUxUX1JDLFxuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gIH0pO1xuICB5YS5jb21wbGV0aW9uKCk7XG4gIHlhLmhlbHAoKTtcblxuICAvLyBkbyBub3QgdXNlIHRoZSBkZWZhdWx0IHlhcmdzICctLXZlcnNpb24nIGltcGxlbWVudGF0aW9uIHNpbmNlIGl0IGlzXG4gIC8vIGdsb2JhbCBieSBkZWZhdWx0IChpdCBhcHBlYXJzIG9uIGFsbCBzdWJjb21tYW5kcylcbiAgeWEudmVyc2lvbihmYWxzZSk7XG4gIHlhLm9wdGlvbihcInZlcnNpb25cIiwge1xuICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlNob3cgdmVyc2lvbiBudW1iZXJcIixcbiAgICBnbG9iYWw6IGZhbHNlLFxuICB9KTtcblxuICBjb25zdCBhcmdzID0gYXdhaXQgeWEuYXJndjtcblxuICBpZiAoYXJncy5kZWJ1Zykge1xuICAgIHByb2Nlc3MuZW52LkRFQlVHID0gXCJ0cnVlXCI7XG4gIH1cblxuICBjb25zdCBub2RlVmVyc2lvbiA9IGdldE5vZGVNYWpvclZlcnNpb24oKTtcbiAgaWYgKG5vZGVWZXJzaW9uICYmIG5vZGVWZXJzaW9uIDwgMTYpIHtcbiAgICBsb2dnaW5nLndhcm4oXG4gICAgICBgV0FSTklORzogWW91IGFyZSB1c2luZyBOb2RlIHYke25vZGVWZXJzaW9ufSwgd2hpY2ggcmVhY2hlcyBlbmQgb2YgbGlmZSBvbiBBcHJpbCAzMCwgMjAyMy4gU3VwcG9ydCBmb3IgRU9MIE5vZGUgcmVsZWFzZXMgbWF5IGJlIGRyb3BwZWQgYnkgcHJvamVuIGluIHRoZSBmdXR1cmUuIFBsZWFzZSBjb25zaWRlciB1cGdyYWRpbmcgdG8gTm9kZSA+PSAxNiBhcyBzb29uIGFzIHBvc3NpYmxlLmBcbiAgICApO1xuICB9XG5cbiAgLy8gbm8gY29tbWFuZCBtZWFucyBzeW50aGVzaXplXG4gIGlmIChhcmdzLl8ubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGFyZ3MudmVyc2lvbikge1xuICAgICAgY29uc29sZS5sb2coUFJPSkVOX1ZFUlNJT04pO1xuICAgICAgcHJvY2Vzcy5leGl0KDApO1xuICAgIH1cbiAgICBhd2FpdCBzeW50aChydW50aW1lLCB7XG4gICAgICBwb3N0OiBhcmdzLnBvc3QgYXMgYm9vbGVhbixcbiAgICAgIHdhdGNoOiBhcmdzLndhdGNoIGFzIGJvb2xlYW4sXG4gICAgICByY2ZpbGU6IGFyZ3MucmMgYXMgc3RyaW5nLFxuICAgIH0pO1xuICB9XG59XG5cbm1haW4oKS5jYXRjaCgoZSkgPT4ge1xuICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICBwcm9jZXNzLmV4aXQoMSk7XG59KTtcbiJdfQ==