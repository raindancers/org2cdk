"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cdk8sDeps = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const semver = require("semver");
const component_1 = require("../component");
const dependencies_1 = require("../dependencies");
/**
 * Manages dependencies on the CDK8s.
 */
class Cdk8sDeps extends component_1.Component {
    constructor(project, options) {
        super(project);
        this.dependencyType = options.dependencyType;
        this._packageNames = this.packageNames();
        const framework = determineFrameworkVersion(options);
        this.cdk8sVersion = framework.range;
        this.cdk8sMajorVersion = framework.major;
        this.cdk8sMinimumVersion = framework.minimum;
        // constructs library
        this.addConstructsDependency(options.constructsVersion, options.constructsVersionPinning);
        this.addFrameworkDependency(options.cdk8sVersion, options.cdk8sVersionPinning);
        if (options.cdk8sCliDependency) {
            this.addClientDependency(options.cdk8sCliVersion, options.cdk8sCliVersionPinning);
        }
        if (options.cdk8sPlus ?? true) {
            const k8MinorVersion = options.k8sMinorVersion ?? 22;
            this.addCdk8sPlusDependency(k8MinorVersion, options.cdk8sPlusVersion, 
            // (project instanceof Cdk8sPythonApp) ? true : false,
            options.cdk8sPlusVersionPinning);
        }
    }
    getVersionRequirement(requestedVersion, v1Version, v2Version, pinning) {
        const defaultVersion = this.cdk8sMajorVersion === 1 ? v1Version : v2Version;
        const version = `${requestedVersion ?? defaultVersion}`;
        const versionRequirement = pinning ? `${version}` : `^${version}`;
        return versionRequirement;
    }
    addCdk8sPlusDependency(k8MinorVersion, requestedVersion, pinning) {
        const versionRequirement = this.getVersionRequirement(requestedVersion, "1.0.0-beta.222", "2.0.0-rc.26", pinning);
        const cdk8sPlusMajorVersion = semver.minVersion(versionRequirement)?.major;
        if (!cdk8sPlusMajorVersion) {
            throw new Error(`Cannot determine major version of cdk8s-plus version '${versionRequirement}'`);
        }
        const cdk8sPlusLib = this._packageNames.cdk8sPlus.concat("-", k8MinorVersion.toString());
        this.project.deps.addDependency(`${cdk8sPlusLib}@${versionRequirement}`, this.dependencyType);
        return versionRequirement;
    }
    addClientDependency(requestedVersion, pinning) {
        const versionRequirement = this.getVersionRequirement(requestedVersion, "1.1.34", "2.0.28", pinning);
        const cdk8sCliMajorVersion = semver.minVersion(versionRequirement)?.major;
        if (!cdk8sCliMajorVersion) {
            throw new Error(`Cannot determine major version of cdk8s version '${versionRequirement}'`);
        }
        this.project.deps.addDependency(`${this._packageNames.cdk8sClient}@${versionRequirement}`, dependencies_1.DependencyType.BUILD);
        return versionRequirement;
    }
    addFrameworkDependency(requestedVersion, pinning) {
        const versionRequirement = this.getVersionRequirement(requestedVersion, "1.6.33", "2.3.33", pinning);
        const cdk8sMajorVersion = semver.minVersion(versionRequirement)?.major;
        if (!cdk8sMajorVersion) {
            throw new Error(`Cannot determine major version of cdk8s version '${versionRequirement}'`);
        }
        this.project.deps.addDependency(`${this._packageNames.cdk8s}@${versionRequirement}`, this.dependencyType);
        return versionRequirement;
    }
    addConstructsDependency(requestedVersion, pinning) {
        if (requestedVersion && !semver.parse(requestedVersion)) {
            throw new Error(`"constructsVersion" cannot be parsed as a semver version: ${requestedVersion}`);
        }
        const versionRequirement = this.getVersionRequirement(requestedVersion, "3.4.39", "10.1.42", pinning);
        const constructsMajorVersion = semver.minVersion(versionRequirement)?.major;
        if (!constructsMajorVersion) {
            throw new Error(`Cannot determine major version of constructs version '${versionRequirement}'`);
        }
        switch (this.cdk8sMajorVersion) {
            case 1:
                if (constructsMajorVersion !== 3) {
                    throw new Error("AWS CDK 1.x requires constructs 3.x");
                }
                break;
            case 2:
                if (constructsMajorVersion !== 10) {
                    throw new Error("AWS CDK 2.x requires constructs 10.x");
                }
                break;
        }
        this.project.deps.addDependency(`${this._packageNames.constructs}@${versionRequirement}`, this.dependencyType);
        return versionRequirement;
    }
}
_a = JSII_RTTI_SYMBOL_1;
Cdk8sDeps[_a] = { fqn: "projen.cdk8s.Cdk8sDeps", version: "0.71.82" };
exports.Cdk8sDeps = Cdk8sDeps;
function determineFrameworkVersion(options) {
    const ver = semver.parse(options.cdk8sVersion);
    if (!ver) {
        throw new Error(`"cdk8sVersion" cannot be parsed as a semver version: ${options.cdk8sVersion}`);
    }
    return {
        minimum: ver.format(),
        range: options.cdk8sVersionPinning
            ? options.cdk8sVersion
            : `^${options.cdk8sVersion}`,
        major: ver.major,
    };
}
//# sourceMappingURL=data:application/json;base64,