"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cdk8sPythonApp = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk8s_deps_py_1 = require("./cdk8s-deps-py");
const __1 = require("..");
const python_project_1 = require("../python/python-project");
/**
 * CDK8s app in Python
 *
 *
 * @pjid cdk8s-app-py
 */
class Cdk8sPythonApp extends python_project_1.PythonProject {
    constructor(options) {
        super({ ...options, pytest: false, sample: false });
        this.cdk8sDeps = new cdk8s_deps_py_1.Cdk8sDepsPy(this, {
            dependencyType: __1.DependencyType.RUNTIME,
            cdk8sCliDependency: false,
            ...options,
        });
        if (!options.cdk8sVersion) {
            throw new Error("Required field cdk8sVersion is not specified.");
        }
        this.appEntrypoint = options.appEntrypoint ?? "app.py";
        const synth = this.addTask("synth", {
            description: "Synthesizes your cdk8s app into dist",
            exec: "cdk8s synth",
        });
        // add synth to the build
        this.postCompileTask.spawn(synth);
        const cdk8sImports = options.cdk8sImports ?? [];
        const k8sSpec = options.k8sSpecVersion
            ? `k8s@${options.k8sSpecVersion}`
            : "k8s";
        new __1.YamlFile(this, "cdk8s.yaml", {
            committed: true,
            editGitignore: true,
            obj: {
                language: "python",
                app: `python ${this.appEntrypoint}`,
                imports: [k8sSpec, ...cdk8sImports],
            },
        });
        if (options.sample ?? true) {
            new AppCode(this, this.appEntrypoint);
        }
    }
}
_a = JSII_RTTI_SYMBOL_1;
Cdk8sPythonApp[_a] = { fqn: "projen.cdk8s.Cdk8sPythonApp", version: "0.71.82" };
exports.Cdk8sPythonApp = Cdk8sPythonApp;
class AppCode extends __1.Component {
    constructor(project, filename) {
        super(project);
        new __1.SampleFile(project, filename, {
            contents: [
                "from constructs import Construct",
                "from cdk8s import App, Chart",
                "",
                "",
                "class MyChart(Chart):",
                "  def __init__(self, scope: Construct, id:str):",
                "    super().__init__(scope, id)",
                "",
                "",
                "app = App()",
                'MyChart(app, "${project.name}")',
                "",
                "app.synth()",
            ].join("\n"),
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrOHMtYXBwLXB5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NkazhzL2NkazhzLWFwcC1weS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLG1EQUE4QztBQUM5QywwQkFBcUU7QUFDckUsNkRBQStFO0FBOEIvRTs7Ozs7R0FLRztBQUNILE1BQWEsY0FBZSxTQUFRLDhCQUFhO0lBUS9DLFlBQVksT0FBMkI7UUFDckMsS0FBSyxDQUFDLEVBQUUsR0FBRyxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUVwRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksMkJBQVcsQ0FBQyxJQUFJLEVBQUU7WUFDckMsY0FBYyxFQUFFLGtCQUFjLENBQUMsT0FBTztZQUN0QyxrQkFBa0IsRUFBRSxLQUFLO1lBQ3pCLEdBQUcsT0FBTztTQUNYLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztTQUNsRTtRQUVELElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsSUFBSSxRQUFRLENBQUM7UUFFdkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDbEMsV0FBVyxFQUFFLHNDQUFzQztZQUNuRCxJQUFJLEVBQUUsYUFBYTtTQUNwQixDQUFDLENBQUM7UUFFSCx5QkFBeUI7UUFDekIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbEMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUM7UUFDaEQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWM7WUFDcEMsQ0FBQyxDQUFDLE9BQU8sT0FBTyxDQUFDLGNBQWMsRUFBRTtZQUNqQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBRVYsSUFBSSxZQUFRLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUMvQixTQUFTLEVBQUUsSUFBSTtZQUNmLGFBQWEsRUFBRSxJQUFJO1lBQ25CLEdBQUcsRUFBRTtnQkFDSCxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsR0FBRyxFQUFFLFVBQVUsSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDbkMsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsWUFBWSxDQUFDO2FBQ3BDO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRTtZQUMxQixJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQzs7OztBQWpEVSx3Q0FBYztBQW9EM0IsTUFBTSxPQUFRLFNBQVEsYUFBUztJQUM3QixZQUFZLE9BQXVCLEVBQUUsUUFBZ0I7UUFDbkQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWYsSUFBSSxjQUFVLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRTtZQUNoQyxRQUFRLEVBQUU7Z0JBQ1Isa0NBQWtDO2dCQUNsQyw4QkFBOEI7Z0JBQzlCLEVBQUU7Z0JBQ0YsRUFBRTtnQkFDRix1QkFBdUI7Z0JBQ3ZCLGlEQUFpRDtnQkFDakQsaUNBQWlDO2dCQUNqQyxFQUFFO2dCQUNGLEVBQUU7Z0JBQ0YsYUFBYTtnQkFDYixpQ0FBaUM7Z0JBQ2pDLEVBQUU7Z0JBQ0YsYUFBYTthQUNkLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNiLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENkazhzRGVwcywgQ2RrOHNEZXBzQ29tbW9uT3B0aW9ucyB9IGZyb20gXCIuL2NkazhzLWRlcHNcIjtcbmltcG9ydCB7IENkazhzRGVwc1B5IH0gZnJvbSBcIi4vY2RrOHMtZGVwcy1weVwiO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBEZXBlbmRlbmN5VHlwZSwgWWFtbEZpbGUsIFNhbXBsZUZpbGUgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IFB5dGhvblByb2plY3QsIFB5dGhvblByb2plY3RPcHRpb25zIH0gZnJvbSBcIi4uL3B5dGhvbi9weXRob24tcHJvamVjdFwiO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGBDZGs4c1B5dGhvbkFwcGBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDZGs4c1B5dGhvbk9wdGlvbnNcbiAgZXh0ZW5kcyBQeXRob25Qcm9qZWN0T3B0aW9ucyxcbiAgICBDZGs4c0RlcHNDb21tb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIEltcG9ydCBhIHNwZWNpZmljIEt1YmVybmV0ZXMgc3BlYyB2ZXJzaW9uLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIFVzZSB0aGUgY2RrOHMgZGVmYXVsdFxuICAgKi9cbiAgcmVhZG9ubHkgazhzU3BlY1ZlcnNpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEltcG9ydCBhZGRpdGlvbmFsIHNwZWNzXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gYWRkaXRpb25hbCBzcGVjcyBpbXBvcnRlZFxuICAgKi9cbiAgcmVhZG9ubHkgY2RrOHNJbXBvcnRzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoZSBDREs4cyBhcHAncyBlbnRyeXBvaW50XG4gICAqXG4gICAqIEBkZWZhdWx0IFwiYXBwLnB5XCJcbiAgICovXG4gIHJlYWRvbmx5IGFwcEVudHJ5cG9pbnQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ0RLOHMgYXBwIGluIFB5dGhvblxuICpcbiAqXG4gKiBAcGppZCBjZGs4cy1hcHAtcHlcbiAqL1xuZXhwb3J0IGNsYXNzIENkazhzUHl0aG9uQXBwIGV4dGVuZHMgUHl0aG9uUHJvamVjdCB7XG4gIC8qKlxuICAgKiBUaGUgQ0RLOHMgYXBwIGVudHJ5cG9pbnRcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhcHBFbnRyeXBvaW50OiBzdHJpbmc7XG5cbiAgcHVibGljIHJlYWRvbmx5IGNkazhzRGVwczogQ2RrOHNEZXBzO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IENkazhzUHl0aG9uT3B0aW9ucykge1xuICAgIHN1cGVyKHsgLi4ub3B0aW9ucywgcHl0ZXN0OiBmYWxzZSwgc2FtcGxlOiBmYWxzZSB9KTtcblxuICAgIHRoaXMuY2RrOHNEZXBzID0gbmV3IENkazhzRGVwc1B5KHRoaXMsIHtcbiAgICAgIGRlcGVuZGVuY3lUeXBlOiBEZXBlbmRlbmN5VHlwZS5SVU5USU1FLFxuICAgICAgY2RrOHNDbGlEZXBlbmRlbmN5OiBmYWxzZSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfSk7XG5cbiAgICBpZiAoIW9wdGlvbnMuY2RrOHNWZXJzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXF1aXJlZCBmaWVsZCBjZGs4c1ZlcnNpb24gaXMgbm90IHNwZWNpZmllZC5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5hcHBFbnRyeXBvaW50ID0gb3B0aW9ucy5hcHBFbnRyeXBvaW50ID8/IFwiYXBwLnB5XCI7XG5cbiAgICBjb25zdCBzeW50aCA9IHRoaXMuYWRkVGFzayhcInN5bnRoXCIsIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlN5bnRoZXNpemVzIHlvdXIgY2RrOHMgYXBwIGludG8gZGlzdFwiLFxuICAgICAgZXhlYzogXCJjZGs4cyBzeW50aFwiLFxuICAgIH0pO1xuXG4gICAgLy8gYWRkIHN5bnRoIHRvIHRoZSBidWlsZFxuICAgIHRoaXMucG9zdENvbXBpbGVUYXNrLnNwYXduKHN5bnRoKTtcblxuICAgIGNvbnN0IGNkazhzSW1wb3J0cyA9IG9wdGlvbnMuY2RrOHNJbXBvcnRzID8/IFtdO1xuICAgIGNvbnN0IGs4c1NwZWMgPSBvcHRpb25zLms4c1NwZWNWZXJzaW9uXG4gICAgICA/IGBrOHNAJHtvcHRpb25zLms4c1NwZWNWZXJzaW9ufWBcbiAgICAgIDogXCJrOHNcIjtcblxuICAgIG5ldyBZYW1sRmlsZSh0aGlzLCBcImNkazhzLnlhbWxcIiwge1xuICAgICAgY29tbWl0dGVkOiB0cnVlLFxuICAgICAgZWRpdEdpdGlnbm9yZTogdHJ1ZSxcbiAgICAgIG9iajoge1xuICAgICAgICBsYW5ndWFnZTogXCJweXRob25cIixcbiAgICAgICAgYXBwOiBgcHl0aG9uICR7dGhpcy5hcHBFbnRyeXBvaW50fWAsXG4gICAgICAgIGltcG9ydHM6IFtrOHNTcGVjLCAuLi5jZGs4c0ltcG9ydHNdLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmIChvcHRpb25zLnNhbXBsZSA/PyB0cnVlKSB7XG4gICAgICBuZXcgQXBwQ29kZSh0aGlzLCB0aGlzLmFwcEVudHJ5cG9pbnQpO1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBBcHBDb2RlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvamVjdDogQ2RrOHNQeXRob25BcHAsIGZpbGVuYW1lOiBzdHJpbmcpIHtcbiAgICBzdXBlcihwcm9qZWN0KTtcblxuICAgIG5ldyBTYW1wbGVGaWxlKHByb2plY3QsIGZpbGVuYW1lLCB7XG4gICAgICBjb250ZW50czogW1xuICAgICAgICBcImZyb20gY29uc3RydWN0cyBpbXBvcnQgQ29uc3RydWN0XCIsXG4gICAgICAgIFwiZnJvbSBjZGs4cyBpbXBvcnQgQXBwLCBDaGFydFwiLFxuICAgICAgICBcIlwiLFxuICAgICAgICBcIlwiLFxuICAgICAgICBcImNsYXNzIE15Q2hhcnQoQ2hhcnQpOlwiLFxuICAgICAgICBcIiAgZGVmIF9faW5pdF9fKHNlbGYsIHNjb3BlOiBDb25zdHJ1Y3QsIGlkOnN0cik6XCIsXG4gICAgICAgIFwiICAgIHN1cGVyKCkuX19pbml0X18oc2NvcGUsIGlkKVwiLFxuICAgICAgICBcIlwiLFxuICAgICAgICBcIlwiLFxuICAgICAgICBcImFwcCA9IEFwcCgpXCIsXG4gICAgICAgICdNeUNoYXJ0KGFwcCwgXCIke3Byb2plY3QubmFtZX1cIiknLFxuICAgICAgICBcIlwiLFxuICAgICAgICBcImFwcC5zeW50aCgpXCIsXG4gICAgICBdLmpvaW4oXCJcXG5cIiksXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==