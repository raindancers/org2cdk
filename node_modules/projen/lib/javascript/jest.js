"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jest = exports.JestReporter = exports.UpdateSnapshot = exports.WatchPlugin = exports.Transform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("path");
const semver = require("semver");
const component_1 = require("../component");
const javascript_1 = require("../javascript");
const json_1 = require("../json");
const DEFAULT_TEST_REPORTS_DIR = "test-reports";
class Transform {
    constructor(name, options) {
        this.name = name;
        this.options = options;
    }
    /**
     * @jsii ignore
     * @internal
     */
    toJSON() {
        if (this.options != null) {
            return [this.name, this.options];
        }
        return this.name;
    }
}
_a = JSII_RTTI_SYMBOL_1;
Transform[_a] = { fqn: "projen.javascript.Transform", version: "0.71.82" };
exports.Transform = Transform;
class WatchPlugin {
    constructor(name, options) {
        this.name = name;
        this.options = options;
    }
    /**
     * @jsii ignore
     * @internal
     */
    toJSON() {
        if (this.options != null) {
            return [this.name, this.options];
        }
        return this.name;
    }
}
_b = JSII_RTTI_SYMBOL_1;
WatchPlugin[_b] = { fqn: "projen.javascript.WatchPlugin", version: "0.71.82" };
exports.WatchPlugin = WatchPlugin;
var UpdateSnapshot;
(function (UpdateSnapshot) {
    /**
     * Always update snapshots in "test" task.
     */
    UpdateSnapshot["ALWAYS"] = "always";
    /**
     * Never update snapshots in "test" task and create a separate "test:update" task.
     */
    UpdateSnapshot["NEVER"] = "never";
})(UpdateSnapshot = exports.UpdateSnapshot || (exports.UpdateSnapshot = {}));
class JestReporter {
    constructor(name, options) {
        this.name = name;
        this.options = options;
    }
    /**
     * @jsii ignore
     * @internal
     */
    toJSON() {
        if (this.options == null) {
            return this.name;
        }
        return [this.name, this.options];
    }
}
_c = JSII_RTTI_SYMBOL_1;
JestReporter[_c] = { fqn: "projen.javascript.JestReporter", version: "0.71.82" };
exports.JestReporter = JestReporter;
/**
 * Installs the following npm scripts:
 *
 * - `test`, intended for testing locally and in CI. Will update snapshots unless `updateSnapshot: UpdateSnapshot: NEVER` is set.
 * - `test:watch`, intended for automatically rerunning tests when files change.
 * - `test:update`, intended for testing locally and updating snapshots to match the latest unit under test. Only available when `updateSnapshot: UpdateSnapshot: NEVER`.
 *
 */
class Jest extends component_1.Component {
    /**
     * Returns the singletone Jest component of a project or undefined if there is none.
     */
    static of(project) {
        const isJest = (c) => c instanceof Jest;
        return project.components.find(isJest);
    }
    constructor(project, options = {}) {
        super(project);
        // hard deprecation
        if (options.typescriptConfig) {
            throw new Error('"jestOptions.typescriptConfig" is deprecated. Use "typescriptProject.tsconfigDev" instead');
        }
        // Jest snapshot files are generated files!
        project.root.annotateGenerated("*.snap");
        this.jestVersion = options.jestVersion ? `@${options.jestVersion}` : "";
        project.addDevDeps(`jest${this.jestVersion}`);
        this.jestConfig = {
            ...options.jestConfig,
            additionalOptions: undefined,
            ...options.jestConfig?.additionalOptions,
        };
        this.extraCliOptions = options.extraCliOptions ?? [];
        this.ignorePatterns = this.jestConfig?.testPathIgnorePatterns ??
            options.ignorePatterns ?? ["/node_modules/"];
        this.watchIgnorePatterns = this.jestConfig?.watchPathIgnorePatterns ?? [
            "/node_modules/",
        ];
        this.coverageReporters = this.jestConfig?.coverageReporters ?? [
            "json",
            "lcov",
            "clover",
            "cobertura",
        ];
        this.testMatch = this.jestConfig?.testMatch ?? [
            "**/__tests__/**/*.[jt]s?(x)",
            "**/?(*.)+(spec|test).[tj]s?(x)",
        ];
        const coverageDirectory = this.jestConfig?.coverageDirectory ?? "coverage";
        this.reporters = [];
        if (options.preserveDefaultReporters ?? true) {
            this.reporters.unshift(new JestReporter("default"));
        }
        this.config = {
            ...this.jestConfig,
            clearMocks: this.jestConfig?.clearMocks ?? true,
            collectCoverage: options.coverage ?? this.jestConfig?.collectCoverage ?? true,
            coverageReporters: this.coverageReporters,
            coverageDirectory: coverageDirectory,
            coveragePathIgnorePatterns: this.jestConfig?.coveragePathIgnorePatterns ?? this.ignorePatterns,
            testPathIgnorePatterns: this.ignorePatterns,
            watchPathIgnorePatterns: this.watchIgnorePatterns,
            testMatch: this.testMatch,
            reporters: this.reporters,
            snapshotResolver: (() => this._snapshotResolver),
        };
        if (options.junitReporting ?? true) {
            const reportsDir = DEFAULT_TEST_REPORTS_DIR;
            this.addReporter(new JestReporter("jest-junit", { outputDirectory: reportsDir }));
            project.addDevDeps("jest-junit@^15");
            project.gitignore.exclude("# jest-junit artifacts", `/${reportsDir}/`, "junit.xml");
            project.npmignore?.exclude("# jest-junit artifacts", `/${reportsDir}/`, "junit.xml");
        }
        if (this.jestConfig?.reporters) {
            for (const reporter of this.jestConfig.reporters) {
                this.addReporter(reporter);
            }
        }
        if (this.jestConfig?.coverageThreshold) {
            this.config.coverageThreshold = {
                global: this.jestConfig?.coverageThreshold,
            };
        }
        this.configureTestCommand(options.updateSnapshot ?? UpdateSnapshot.ALWAYS);
        if (options.configFilePath) {
            this.file = new json_1.JsonFile(project, options.configFilePath, {
                obj: this.config,
            });
            project.npmignore?.addPatterns(`/${this.file.path}`);
        }
        else {
            project.addFields({ jest: this.config });
        }
        const coverageDirectoryPath = path.posix.join("/", coverageDirectory, "/");
        project.npmignore?.exclude(coverageDirectoryPath);
        project.gitignore.exclude(coverageDirectoryPath);
        if (options.coverageText ?? true) {
            this.coverageReporters.push("text");
        }
    }
    /**
     * Adds a test match pattern.
     * @param pattern glob pattern to match for tests
     */
    addTestMatch(pattern) {
        this.testMatch.push(pattern);
    }
    /**
     * Adds a watch ignore pattern.
     * @param pattern The pattern (regular expression).
     */
    addWatchIgnorePattern(pattern) {
        this.watchIgnorePatterns.push(pattern);
    }
    addIgnorePattern(pattern) {
        this.ignorePatterns.push(pattern);
    }
    addReporter(reporter) {
        this.reporters.push(reporter);
    }
    /**
     * Adds a a setup file to Jest's setupFiles configuration.
     * @param file File path to setup file
     */
    addSetupFile(file) {
        if (!this.config.setupFiles) {
            this.config.setupFiles = [];
        }
        this.config.setupFiles.push(file);
    }
    /**
     * Adds a a setup file to Jest's setupFilesAfterEnv configuration.
     * @param file File path to setup file
     */
    addSetupFileAfterEnv(file) {
        if (!this.config.setupFilesAfterEnv) {
            this.config.setupFilesAfterEnv = [];
        }
        this.config.setupFilesAfterEnv.push(file);
    }
    addSnapshotResolver(file) {
        this._snapshotResolver = file;
    }
    configureTestCommand(updateSnapshot) {
        const jestOpts = ["--passWithNoTests", ...this.extraCliOptions];
        const jestConfigOpts = this.file && this.file.path != "jest.config.json"
            ? ` -c ${this.file.path}`
            : "";
        // as recommended in the jest docs, node > 14 may use native v8 coverage collection
        // https://jestjs.io/docs/en/cli#--coverageproviderprovider
        if (this.project instanceof javascript_1.NodeProject &&
            this.project.package.minNodeVersion &&
            semver.gte(this.project.package.minNodeVersion, "14.0.0")) {
            jestOpts.push("--coverageProvider=v8");
        }
        if (updateSnapshot === UpdateSnapshot.ALWAYS) {
            jestOpts.push("--updateSnapshot");
        }
        else {
            jestOpts.push("--ci"); // to prevent accepting new snapshots
            const testUpdate = this.project.tasks.tryFind("test:update");
            if (!testUpdate) {
                this.project.addTask("test:update", {
                    description: "Update jest snapshots",
                    exec: `jest --updateSnapshot ${jestOpts.join(" ")}${jestConfigOpts}`,
                    receiveArgs: true,
                });
            }
        }
        this.project.testTask.exec(`jest ${jestOpts.join(" ")}${jestConfigOpts}`, {
            receiveArgs: true,
        });
        const testWatch = this.project.tasks.tryFind("test:watch");
        if (!testWatch) {
            this.project.addTask("test:watch", {
                description: "Run jest in watch mode",
                exec: `jest --watch${jestConfigOpts}`,
            });
        }
    }
}
_d = JSII_RTTI_SYMBOL_1;
Jest[_d] = { fqn: "projen.javascript.Jest", version: "0.71.82" };
exports.Jest = Jest;
//# sourceMappingURL=data:application/json;base64,