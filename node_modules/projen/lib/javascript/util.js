"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryResolveDependencyVersion = exports.tryResolveModuleManifest = exports.tryResolveManifestPathFromSearch = exports.tryResolveManifestPathFromPath = exports.tryResolveManifestPathFromDefaultExport = exports.tryResolveModuleManifestPath = exports.tryResolveModule = exports.minVersion = exports.extractCodeArtifactDetails = exports.codeArtifactRegex = exports.renderBundleName = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const semver = require("semver");
const util_1 = require("../util");
function renderBundleName(entrypoint) {
    const parts = (0, path_1.join)(entrypoint).split(path_1.sep);
    if (parts[0] === "src") {
        parts.shift(); // just remove 'src' if its the first element for ergonomics
    }
    const p = parts.join(path_1.sep);
    const dir = (0, path_1.dirname)(p);
    const base = (0, path_1.basename)(p, (0, path_1.extname)(p));
    return (0, path_1.join)(dir, base);
}
exports.renderBundleName = renderBundleName;
/**
 * Regex for AWS CodeArtifact registry
 */
exports.codeArtifactRegex = /^https:\/\/(?<registry>(?<domain>[^\.]+)-(?<accountId>\d{12})\.d\.codeartifact\.(?<region>[^\.]+).*\.amazonaws\.com\/.*\/(?<repository>[^\/.]+)\/)/;
/**
 * gets AWS details from the Code Artifact registry URL
 * throws exception if not matching expected pattern
 * @param registryUrl Code Artifact registry URL
 * @returns object containing the (domain, accountId, region, repository)
 */
function extractCodeArtifactDetails(registryUrl) {
    const match = registryUrl.match(exports.codeArtifactRegex);
    if (match?.groups) {
        const { domain, accountId, region, repository, registry } = match.groups;
        return { domain, accountId, region, repository, registry };
    }
    throw new Error("Could not get CodeArtifact details from npm Registry");
}
exports.extractCodeArtifactDetails = extractCodeArtifactDetails;
function minVersion(version) {
    if (semver.validRange(version)) {
        return semver.minVersion(version)?.version;
    }
    else {
        return version;
    }
}
exports.minVersion = minVersion;
/**
 * Attempt to resolve location of the given `moduleId`.
 * @param moduleId Module ID to lookup.
 * @param options Passed through to `require.resolve`.
 */
function tryResolveModule(moduleId, options) {
    try {
        return require.resolve(moduleId, options);
    }
    catch {
        return undefined;
    }
}
exports.tryResolveModule = tryResolveModule;
/**
 * Attempt to resolve a module's manifest (package.json) path via `require.resolve` lookup.
 *
 * @remarks
 * If the target package has `exports` that differ from the default
 * (i.e, it defines the `exports` field in its manifest) and does not
 * explicitly include an entry for `package.json`, this strategy will fail.
 * See {@link tryResolveManifestPathFromDefaultExport} as an alternative.
 *
 * @param moduleId Module ID to lookup.
 * @param options Passed through to `require.resolve`.
 */
function tryResolveModuleManifestPath(moduleId, options) {
    // cannot just `require('dependency/package.json')` here because
    // `options.paths` may not overlap with this node proc's resolution paths.
    const manifestId = `${moduleId}/package.json`;
    return tryResolveModule(manifestId, options);
}
exports.tryResolveModuleManifestPath = tryResolveModuleManifestPath;
/**
 * Attempt to resolve a module's manifest (package.json) path by looking for the nearest
 * `package.json` file that is an ancestor to the module's default export location.
 *
 * @param moduleId Module ID to lookup.
 * @param options Passed through to `require.resolve`.
 */
function tryResolveManifestPathFromDefaultExport(moduleId, options) {
    const defaultExportPath = tryResolveModule(moduleId, options);
    if (!defaultExportPath) {
        return undefined;
    }
    const moduleDir = (0, util_1.findUp)("package.json", defaultExportPath);
    if (!moduleDir) {
        return undefined;
    }
    return (0, path_1.join)(moduleDir, "package.json");
}
exports.tryResolveManifestPathFromDefaultExport = tryResolveManifestPathFromDefaultExport;
/**
 * Attempt to resolve a module's manifest (package.json) path by checking for its existence under `node_modules` relative to `basePath`.
 *
 * @remarks
 * This strategy can be helpful in the scenario that a module defines
 * custom exports without `package.json` and no default export (i.e, some type definition packages).
 *
 * @param moduleId Module ID to lookup.
 * @param basePath Root path to search from.
 */
function tryResolveManifestPathFromPath(moduleId, basePath) {
    const base = basePath.includes("node_modules")
        ? basePath
        : (0, path_1.join)(basePath, "node_modules");
    const filePath = (0, path_1.resolve)(base, ...moduleId.split("/"), "package.json");
    if ((0, fs_1.existsSync)(filePath)) {
        return filePath;
    }
    return undefined;
}
exports.tryResolveManifestPathFromPath = tryResolveManifestPathFromPath;
/**
 * Attempt to resolve a module's manifest (package.json) path by searching for it in the optionally provided paths array
 * as well as the current node processes' default resolution paths.
 * @param moduleId Module ID to search for.
 * @param options Search options.
 */
function tryResolveManifestPathFromSearch(moduleId, options) {
    const searchPaths = [
        ...(options?.paths ?? []),
        ...(require.resolve.paths(moduleId) ?? []),
    ];
    for (const path of searchPaths) {
        const result = tryResolveManifestPathFromPath(moduleId, path);
        // early return on first result.
        if (result) {
            return result;
        }
    }
    return undefined;
}
exports.tryResolveManifestPathFromSearch = tryResolveManifestPathFromSearch;
/**
 * Attempt to resolve a module's manifest (package.json) using multiple strategies.
 * @param moduleId Module to resolve manifest path for.
 * @param options Resolution options.
 */
function tryResolveModuleManifest(moduleId, options) {
    const strategies = [
        tryResolveModuleManifestPath,
        tryResolveManifestPathFromDefaultExport,
        tryResolveManifestPathFromSearch,
    ];
    for (const strategy of strategies) {
        const result = strategy(moduleId, options);
        // early return on first result.
        if (result) {
            try {
                const manifest = JSON.parse((0, fs_1.readFileSync)(result, "utf8"));
                // verify name matches target module.
                if (manifest.name === moduleId) {
                    return manifest;
                }
            }
            catch {
                // continue to next strategy.
            }
        }
    }
    return undefined;
}
exports.tryResolveModuleManifest = tryResolveModuleManifest;
/**
 * Attempt to resolve the installed version of a given dependency.
 * @param dependencyName Name of dependency.
 * @param options Optional options passed through to `require.resolve`.
 */
function tryResolveDependencyVersion(dependencyName, options) {
    const manifest = tryResolveModuleManifest(dependencyName, options);
    if (!manifest) {
        return undefined;
    }
    return manifest?.version;
}
exports.tryResolveDependencyVersion = tryResolveDependencyVersion;
//# sourceMappingURL=data:application/json;base64,