"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Prettier = exports.TrailingComma = exports.QuoteProps = exports.ProseWrap = exports.HTMLWhitespaceSensitivity = exports.EndOfLine = exports.EmbeddedLanguageFormatting = exports.ArrowParens = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("../component");
const ignore_file_1 = require("../ignore-file");
const json_1 = require("../json");
const source_code_1 = require("../source-code");
const yaml_1 = require("../yaml");
var ArrowParens;
(function (ArrowParens) {
    /**
     * Always include parens. Example: `(x) => x`
     */
    ArrowParens["ALWAYS"] = "always";
    /**
     * Omit parens when possible. Example: `x => x`
     */
    ArrowParens["AVOID"] = "avoid";
})(ArrowParens = exports.ArrowParens || (exports.ArrowParens = {}));
var EmbeddedLanguageFormatting;
(function (EmbeddedLanguageFormatting) {
    /**
     * Format embedded code if Prettier can automatically identify it.
     */
    EmbeddedLanguageFormatting["AUTO"] = "auto";
    /**
     * Never automatically format embedded code.
     */
    EmbeddedLanguageFormatting["OFF"] = "off";
})(EmbeddedLanguageFormatting = exports.EmbeddedLanguageFormatting || (exports.EmbeddedLanguageFormatting = {}));
var EndOfLine;
(function (EndOfLine) {
    /**
     * Maintain existing (mixed values within one file are normalised by looking
     * at what's used after the first line)
     */
    EndOfLine["AUTO"] = "auto";
    /**
     * Carriage Return character only (\r), used very rarely
     */
    EndOfLine["CR"] = "cr";
    /**
     * Carriage Return + Line Feed characters (\r\n), common on Windows
     */
    EndOfLine["CRLF"] = "crlf";
    /**
     * Line Feed only (\n), common on Linux and macOS as well as inside git repos
     */
    EndOfLine["LF"] = "lf";
})(EndOfLine = exports.EndOfLine || (exports.EndOfLine = {}));
var HTMLWhitespaceSensitivity;
(function (HTMLWhitespaceSensitivity) {
    /**
     * Respect the default value of CSS display property.
     */
    HTMLWhitespaceSensitivity["CSS"] = "css";
    /**
     * Whitespaces are considered insignificant.
     */
    HTMLWhitespaceSensitivity["IGNORE"] = "ignore";
    /**
     * Whitespaces are considered significant.
     */
    HTMLWhitespaceSensitivity["STRICT"] = "strict";
})(HTMLWhitespaceSensitivity = exports.HTMLWhitespaceSensitivity || (exports.HTMLWhitespaceSensitivity = {}));
var ProseWrap;
(function (ProseWrap) {
    /**
     * Wrap prose if it exceeds the print width.
     */
    ProseWrap["ALWAYS"] = "always";
    /**
     * Do not wrap prose.
     */
    ProseWrap["NEVER"] = "never";
    /**
     * Wrap prose as-is.
     */
    ProseWrap["PRESERVE"] = "preserve";
})(ProseWrap = exports.ProseWrap || (exports.ProseWrap = {}));
var QuoteProps;
(function (QuoteProps) {
    /**
     * Only add quotes around object properties where required.
     */
    QuoteProps["ASNEEDED"] = "as-needed";
    /**
     * If at least one property in an object requires quotes, quote all properties.
     */
    QuoteProps["CONSISTENT"] = "consistent";
    /**
     * Respect the input use of quotes in object properties.
     */
    QuoteProps["PRESERVE"] = "preserve";
})(QuoteProps = exports.QuoteProps || (exports.QuoteProps = {}));
var TrailingComma;
(function (TrailingComma) {
    /**
     * Trailing commas wherever possible (including function arguments).
     */
    TrailingComma["ALL"] = "all";
    /**
     * Trailing commas where valid in ES5 (objects, arrays, etc.)
     */
    TrailingComma["ES5"] = "es5";
    /**
     * No trailing commas.
     */
    TrailingComma["NONE"] = "none";
})(TrailingComma = exports.TrailingComma || (exports.TrailingComma = {}));
/**
 * Represents prettier configuration.
 */
class Prettier extends component_1.Component {
    static of(project) {
        const isPrettier = (c) => c instanceof Prettier;
        return project.components.find(isPrettier);
    }
    constructor(project, options) {
        super(project);
        this._overrides = options.overrides ?? [];
        if (options.ignoreFile ?? true) {
            this.ignoreFile = new ignore_file_1.IgnoreFile(project, ".prettierignore", options.ignoreFileOptions);
        }
        project.addDevDeps("prettier");
        this.settings = {
            ...options.settings,
        };
        if (options.yaml) {
            new yaml_1.YamlFile(project, ".prettierrc.yml", {
                obj: () => ({ ...this.settings, overrides: [...this._overrides] }),
                marker: true,
            });
        }
        else {
            new json_1.JsonFile(project, ".prettierrc.json", {
                obj: () => ({ ...this.settings, overrides: [...this._overrides] }),
                marker: false,
            });
        }
    }
    /**
     * Add a prettier override
     * @see https://prettier.io/docs/en/configuration.html#configuration-overrides
     * @param {PrettierOverride} override
     */
    addOverride(override) {
        this._overrides.push(override);
    }
    /**
     * Defines Prettier ignore Patterns
     * these patterns will be added to the file .prettierignore
     *
     * @param pattern filepatterns so exclude from prettier formatting
     */
    addIgnorePattern(pattern) {
        this.ignoreFile?.addPatterns(pattern);
    }
    /**
     *  Returns all Prettier overrides
     */
    get overrides() {
        return [...this._overrides];
    }
    preSynthesize() {
        // Add automatically generated SourceCode files to .prettierignore as they may not be formatted correctly.
        const isSourceCode = (c) => c instanceof source_code_1.SourceCode;
        this.project.components.filter(isSourceCode).forEach((c) => {
            this.addIgnorePattern(c.filePath);
        });
    }
}
_a = JSII_RTTI_SYMBOL_1;
Prettier[_a] = { fqn: "projen.javascript.Prettier", version: "0.71.82" };
exports.Prettier = Prettier;
//# sourceMappingURL=data:application/json;base64,