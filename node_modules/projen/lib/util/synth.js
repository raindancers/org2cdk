"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.directorySnapshot = exports.synthSnapshot = void 0;
const fs = require("fs");
const os = require("os");
const path = require("path");
const JSONC = require("comment-json");
const comment_json_1 = require("comment-json");
const glob_1 = require("glob");
const json_1 = require("../json");
/**
 * Creates a snapshot of the files generated by a project. Ignores any non-text
 * files so that the snapshots are human readable.
 */
function synthSnapshot(project, options = {}) {
    // defensive: verify that "outdir" is actually in a temporary directory
    if (!path.resolve(project.outdir).startsWith(os.tmpdir()) &&
        !project.outdir.includes("project-temp-dir")) {
        throw new Error("Trying to capture a snapshot of a project outside of tmpdir, which implies this test might corrupt an existing project");
    }
    const synthed = Symbol.for("synthed");
    if (synthed in project) {
        throw new Error("duplicate synth()");
    }
    project[synthed] = true;
    const ENV_PROJEN_DISABLE_POST = process.env.PROJEN_DISABLE_POST;
    try {
        process.env.PROJEN_DISABLE_POST = "true";
        project.synth();
        const ignoreExts = ["png", "ico"];
        return directorySnapshot(project.outdir, {
            ...options,
            excludeGlobs: ignoreExts.map((ext) => `**/*.${ext}`),
            supportJsonComments: project.files.some(
            // At least one json file in project supports comments
            (file) => file instanceof json_1.JsonFile && file.supportsComments),
        });
    }
    finally {
        fs.rmSync(project.outdir, { force: true, recursive: true });
        // values assigned to process.env.XYZ are automatically converted to strings
        if (ENV_PROJEN_DISABLE_POST === undefined) {
            delete process.env.PROJEN_DISABLE_POST;
        }
        else {
            process.env.PROJEN_DISABLE_POST = ENV_PROJEN_DISABLE_POST;
        }
    }
}
exports.synthSnapshot = synthSnapshot;
function isJsonLikeFile(filePath) {
    const file = filePath.toLowerCase();
    return (file.endsWith(".json") || file.endsWith(".json5") || file.endsWith(".jsonc"));
}
function directorySnapshot(root, options = {}) {
    const output = {};
    const files = glob_1.glob.sync("**", {
        ignore: [".git/**", ...(options.excludeGlobs ?? [])],
        cwd: root,
        nodir: true,
        dot: true,
    }); // returns relative file paths with POSIX separators
    const parseJson = options.parseJson ?? true;
    for (const file of files) {
        const filePath = path.join(root, file);
        let content;
        if (!options.onlyFileNames) {
            content = fs.readFileSync(filePath, "utf-8");
            if (parseJson && isJsonLikeFile(filePath)) {
                content = cleanCommentArrays(JSONC.parse(content, undefined, !options.supportJsonComments));
            }
        }
        else {
            content = true;
        }
        output[file] = content;
    }
    return output;
}
exports.directorySnapshot = directorySnapshot;
/**
 * Converts type "CommentArray" back to regular JS "Array"
 * if there are no comments stored in it.
 * Prevents strict checks from failing.
 */
function cleanCommentArrays(obj) {
    if (Array.isArray(obj) || isCommentArrayWithoutComments(obj)) {
        return Array.from(obj).map(cleanCommentArrays);
    }
    if (obj instanceof Object) {
        for (const p of Object.keys(obj)) {
            if (isCommentArrayWithoutComments(obj[p])) {
                obj[p] = Array.from(obj[p]).map(cleanCommentArrays);
            }
            else if (obj[p] instanceof Object) {
                obj[p] = cleanCommentArrays(obj[p]);
            }
        }
    }
    return obj;
}
/**
 * Checks if a "CommentArray" has no comments stored in it.
 */
function isCommentArrayWithoutComments(obj) {
    return (obj instanceof comment_json_1.CommentArray &&
        Object.getOwnPropertySymbols(obj).length === 0);
}
//# sourceMappingURL=data:application/json;base64,